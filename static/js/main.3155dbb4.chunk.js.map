{"version":3,"sources":["utils/AlgorithmUtil.js","utils/Algorithms/BFS.js","utils/Algorithms/DFS.js","utils/GridUtil.js","actions/index.js","components/Node.js","components/Grid.js","components/Navbar.js","components/Statbar.js","components/Carousel.js","components/Menu.js","components/App.js","reducers/index.js","index.js"],"names":["isAlgorithmRunning","store","getState","algorithmStatus","isAlgorithmUnselected","isAlgorithmCompleted","isAlgorithmReady","nodeEquals","node_1","node_2","getNeighbors","node","neighbors","Array","dy","dx","i","length","push","shouldAddNode","grid","m","n","j","isVisitedNode","isWallNode","isFrontierNode","tracePath","endNode","togglePathNode","a","stack","buckets","Stack","parent","isEmpty","pop","sleep","setPath","isPathNode","duration","Promise","resolve","setTimeout","runBFS","queue","startNode","toggleVisitedNode","toggleFrontierNode","completeAlgorithm","setParentNode","Queue","enqueue","currNode","dequeue","neighbor","slice","runDFS","Node","this","isStartNode","isEndNode","Statistic","numTotal","numVisited","numFrontier","numWall","numPath","generateEmptyGrid","numRows","numCols","calculateStatistics","statistics","generateRerunAlgorithmGrid","algorithmSelected","rerunBFS","rerunDFS","setVisitedNode","row","col","setWallNode","setFrontierNode","setPathNode","setStartNode","initializeStartNode","setEndNode","initializeEndNode","applyMaskedNode","maskedNode","calculateMaskedStatistic","newMaskedNode","generateWalls","Math","random","clearBoard","initializeStatistics","clearPath","SET_BFS_ALGORITHM","SET_DFS_ALGORITHM","SET_ASTAR_ALGORITHM","SET_GREEDY_ALGORITHM","TOGGLE_VISITED_NODE","TOGGLE_FRONTIER_NODE","TOGGLE_WALL_NODE","TOGGLE_PATH_NODE","SET_ALGORITHM_STATE","CLEAR_ALGORITHM_STATE","SET_START_NODE","SET_END_NODE","RUN_ALGORITHM","READY_ALGORITHM","PAUSE_ALGORITHM","COMPLETE_ALGORITHM","SET_PARENT_NODE","GENERATE_WALLS","CLEAR_BOARD","CLEAR_PATH","SET_DRAGGED_NODE","CLEAR_DRAGGED_NODE","SET_START_MASKED_NODE","APPLY_START_MASKED_NODE","RERUN_ALGORITHM","RESET_START_MASKED_NODE","SET_END_MASKED_NODE","APPLY_END_MASKED_NODE","RESET_END_MASKED_NODE","type","payload","resetStartMaskedNode","resetEndMaskedNode","connect","state","ownProps","board","draggedNode","dispatch","toggleWallNode","setDraggedNode","clearDraggedNode","setStartMaskedNode","setEndMaskedNode","applyStartMaskedNode","applyEndMaskedNode","rerunAlgorithm","nodeClass","className","onMouseOver","onMouseUp","onMouseDown","props","map","cellRow","cell","toString","generateCellKey","generateRowKey","Navbar","runButtonText","runButtonClass","runAlgorithm","readyAlgorithm","clearAlgorithmState","toggleShowCarousel","runButtonDisabled","generateWallsButtonDisabled","onClick","disabled","Carousel","setBFSAlgorithm","algorithms","name","header","setDFSAlgorithm","useState","slideNum","setSlideNum","mod","handleClickSelect","algorithmState","setAlgorithmState","pauseAlgorithm","showCarousel","setShowCarousel","App","start","end","reducer","combineReducers","startMaskedNode","endMaskedNode","action","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3155dbb4.chunk.js","sourcesContent":["import store from \"../\"\r\nimport buckets from 'buckets-js'\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    return store.getState().algorithmStatus === 'RUNNING'\r\n}\r\n\r\nexport const isAlgorithmUnselected = () => {\r\n    return store.getState().algorithmStatus === 'UNSELECTED'\r\n}\r\n\r\nexport const isAlgorithmCompleted = () => {\r\n    return store.getState().algorithmStatus === 'COMPLETED'\r\n}\r\n\r\nexport const isAlgorithmReady = () => {\r\n    return store.getState().algorithmStatus === 'READY'\r\n}\r\n\r\nexport const nodeEquals = (node_1, node_2) => {\r\n    return node_1[0] === node_2[0] && node_1[1] === node_2[1]\r\n}\r\n\r\nexport const getNeighbors = (node) => {\r\n    const neighbors = new Array(0)\r\n    const dy = [0, 0, -1, 1]  // directions of i\r\n    const dx = [1, -1, 0, 0]  // directions of j\r\n    for (let i = 0; i < dy.length; i++) {\r\n        neighbors.push([node[0] + dy[i], node[1] + dx[i]])\r\n    }\r\n    return neighbors\r\n}\r\n\r\n// Enqueue the Node only if it is within the range of the grid, not visited, not a frontier and not a wall node\r\nexport const shouldAddNode = (node, grid) => {\r\n    const m = grid.length\r\n    const n = grid[0].length\r\n    const i = node[0]\r\n    const j = node[1]\r\n    return i >= 0 && i < m && j >= 0 && j < n && !grid[i][j].isVisitedNode && !grid[i][j].isWallNode && !grid[i][j].isFrontierNode\r\n}\r\n\r\nexport const tracePath = async (endNode, grid, togglePathNode) => {\r\n    let node = endNode\r\n    const stack = buckets.Stack() \r\n    while (node != null) {\r\n        stack.push(node)\r\n        node = grid[node[0]][node[1]].parent\r\n    }\r\n    while (!stack.isEmpty()) {\r\n        node = stack.pop()\r\n        togglePathNode(node[0], node[1])\r\n        await sleep(40)\r\n    }\r\n}\r\n\r\n// This sets the path immediately\r\n// without having the trace animation (no intervals between each path node animation)\r\nexport const setPath = (endNode, grid) => {\r\n    let node = endNode\r\n    const stack = buckets.Stack() \r\n    while (node != null) {\r\n        stack.push(node)\r\n        node = grid[node[0]][node[1]].parent\r\n    }\r\n    while (!stack.isEmpty()) {\r\n        node = stack.pop()\r\n        grid[node[0]][node[1]].isPathNode = true\r\n    }\r\n}\r\n\r\nexport const sleep = (duration) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, duration)\r\n    })\r\n}","import { isAlgorithmRunning, nodeEquals, shouldAddNode, getNeighbors, \r\n    sleep, tracePath, setPath } from '../AlgorithmUtil'\r\nimport buckets from 'buckets-js'\r\n\r\nexport const runBFS = async (queue, grid, startNode, endNode, toggleVisitedNode, toggleFrontierNode,\r\n    togglePathNode, completeAlgorithm, setParentNode) => {\r\n        \r\n    // While the algorithm has not been completed or paused\r\n    while (isAlgorithmRunning()) {\r\n        \r\n        // Create a new queue if the current algorithm state is empty; this is the first iteration\r\n        if (!queue) {\r\n            queue = buckets.Queue()\r\n            queue.enqueue(startNode)\r\n        }\r\n\r\n        if (queue.isEmpty()) {  // No path was found\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        // Perform one iteration of BFS\r\n        const currNode = queue.dequeue()\r\n        toggleVisitedNode(currNode[0], currNode[1])\r\n        toggleFrontierNode(currNode[0], currNode[1])  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            await tracePath(endNode, grid, togglePathNode)\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                toggleFrontierNode(neighbor[0], neighbor[1])\r\n                setParentNode(neighbor[0], neighbor[1], currNode.slice())\r\n                queue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n        // Timeout ensures that the animation has enough time to render fully\r\n        await sleep(20)\r\n\r\n    }\r\n\r\n    return queue\r\n\r\n}\r\n\r\n// Run the algorithm on the grid and return the grid state\r\n// corresponding to the completed algorithm \r\n// (rerun does not have the tracing animation; no timeout between each node visit => instantaneous render of traversed graph)\r\nexport const rerunBFS = (grid, startNode, endNode) => {\r\n    const queue = buckets.Queue()\r\n    queue.enqueue(startNode)\r\n    while (!queue.isEmpty()) {\r\n        const currNode = queue.dequeue()\r\n        grid[currNode[0]][currNode[1]].isVisitedNode = true\r\n        grid[currNode[0]][currNode[1]].isFrontierNode = false  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            setPath(endNode, grid)\r\n            break\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                grid[neighbor[0]][neighbor[1]].isFrontierNode = true\r\n                grid[neighbor[0]][neighbor[1]].parent = currNode.slice()\r\n                queue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return grid\r\n}","import { isAlgorithmRunning, nodeEquals, shouldAddNode, getNeighbors, \r\n    sleep, tracePath, setPath } from '../AlgorithmUtil'\r\nimport buckets from 'buckets-js'\r\n\r\nexport const runDFS = async (stack, grid, startNode, endNode, toggleVisitedNode, toggleFrontierNode,\r\n    togglePathNode, completeAlgorithm, setParentNode) => {\r\n        \r\n    // While the algorithm has not been completed or paused\r\n    while (isAlgorithmRunning()) {\r\n        \r\n        // Create a new stack if the current algorithm state is empty; this is the first iteration\r\n        if (!stack) {\r\n            stack = buckets.Stack()\r\n            stack.push(startNode)\r\n        }\r\n\r\n        if (stack.isEmpty()) {  // No path was found\r\n            completeAlgorithm()  // set the status to COMPLETED\r\n            return\r\n        }\r\n\r\n        // Perform one iteration of DFS\r\n        const currNode = stack.pop()\r\n        toggleVisitedNode(currNode[0], currNode[1])\r\n        toggleFrontierNode(currNode[0], currNode[1])  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            await tracePath(endNode, grid, togglePathNode)\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                toggleFrontierNode(neighbor[0], neighbor[1])\r\n                setParentNode(neighbor[0], neighbor[1], currNode.slice())\r\n                stack.push(neighbor)\r\n            }\r\n        }\r\n\r\n        // Timeout ensures that the animation has enough time to render fully\r\n        await sleep(20)\r\n\r\n    }\r\n\r\n    return stack\r\n\r\n}\r\n\r\n// Run the algorithm on the grid and return the grid state\r\n// corresponding to the completed algorithm \r\n// (rerun does not have the tracing animation; no timeout between each node visit => instantaneous render of traversed graph)\r\nexport const rerunDFS = (grid, startNode, endNode) => {\r\n    const stack = buckets.Stack()\r\n    stack.push(startNode)\r\n    while (!stack.isEmpty()) {\r\n        const currNode = stack.pop()\r\n        grid[currNode[0]][currNode[1]].isVisitedNode = true\r\n        grid[currNode[0]][currNode[1]].isFrontierNode = false  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            setPath(endNode, grid)\r\n            break\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                grid[neighbor[0]][neighbor[1]].isFrontierNode = true\r\n                grid[neighbor[0]][neighbor[1]].parent = currNode.slice()\r\n                stack.push(neighbor)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return grid\r\n}","import { rerunBFS } from \"./Algorithms/BFS\"\r\nimport { rerunDFS } from \"./Algorithms/DFS\"\r\n\r\n// Node constructor\r\nexport function Node() {\r\n    this.isStartNode = false\r\n    this.isEndNode = false\r\n    this.isWallNode = false\r\n    this.isFrontierNode = false\r\n    this.isVisitedNode = false\r\n    this.isPathNode = false\r\n    this.parent = null\r\n}\r\n\r\nexport const initializeStartNode = () => {\r\n    const node = new Node()\r\n    node.isStartNode = true\r\n    return node\r\n}\r\n\r\nexport const initializeEndNode = () => {\r\n    const node = new Node()\r\n    node.isEndNode = true\r\n    return node\r\n}\r\n\r\nfunction Statistic(numTotal) {\r\n    this.numTotal = numTotal\r\n    this.numVisited = 0\r\n    this.numFrontier = 0\r\n    this.numWall = 0\r\n    this.numPath = 0\r\n}\r\n\r\n// Key generators for React Grid mapping to rows and cells\r\nexport const generateRowKey = (row) => {\r\n    return row.toString()\r\n}\r\n\r\nexport const generateCellKey = (row, col) => {\r\n    return row.toString() + '#' + col.toString()\r\n}\r\n\r\n// Utilities for generating grids\r\nexport const generateEmptyGrid = (numRows, numCols, startNode, endNode) => {\r\n    const grid = new Array(0)\r\n    for (let i = 0; i < numRows; i++) {\r\n        grid.push(new Array(0))\r\n        for (let j = 0; j < numCols; j++) {\r\n            grid[i].push(new Node())\r\n        }\r\n    }\r\n    grid[startNode[0]][startNode[1]].isStartNode = true\r\n    grid[endNode[0]][endNode[1]].isEndNode = true\r\n    return grid\r\n}\r\n\r\nconst calculateStatistics = (grid) => {\r\n    const numRows = grid.length\r\n    const numCols = grid[0].length\r\n    const statistics = new Statistic(numRows * numCols)\r\n    for (let i = 0; i < numRows; i++) {\r\n        for (let j = 0; j < numCols; j++) {\r\n            statistics.numWall += grid[i][j].isWallNode ? 1 : 0\r\n            statistics.numVisited += grid[i][j].isVisitedNode ? 1 : 0\r\n            statistics.numFrontier += grid[i][j].isFrontierNode ? 1 : 0\r\n            statistics.numPath += grid[i][j].isPathNode ? 1 : 0\r\n        }\r\n    }\r\n    return statistics\r\n}\r\n\r\nexport const generateRerunAlgorithmGrid = (grid, startNode, endNode, algorithmSelected) => {\r\n    grid = grid.slice()\r\n    switch (algorithmSelected) {\r\n        case 'BFS':\r\n            grid = rerunBFS(grid, startNode, endNode)\r\n            break\r\n        case 'DFS':\r\n            grid = rerunDFS(grid, startNode, endNode)\r\n            break\r\n        case 'ASTAR':\r\n            break\r\n        case 'GREEDY':\r\n            break\r\n        default:\r\n            break\r\n    }\r\n    return { \r\n        grid, \r\n        statistics: calculateStatistics(grid) \r\n    }\r\n}\r\n\r\nexport const setVisitedNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isVisitedNode = !node.isVisitedNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numVisited: node.isVisitedNode ? statistics.numVisited + 1 : statistics.numVisited - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setWallNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isWallNode = !node.isWallNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numWall: node.isWallNode ? statistics.numWall + 1 : statistics.numWall - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setFrontierNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isFrontierNode = !node.isFrontierNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numFrontier: node.isFrontierNode ? statistics.numFrontier + 1 : statistics.numFrontier - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPathNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isPathNode = !node.isPathNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numPath: node.isPathNode ? statistics.numPath + 1 : statistics.numPath - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setStartNode = (grid, {row, col}) => {\r\n    grid = grid.slice()\r\n    grid[row][col] = initializeStartNode()\r\n    return grid\r\n}\r\n\r\nexport const setEndNode = (grid, {row, col}) => {\r\n    grid = grid.slice()\r\n    grid[row][col] = initializeEndNode()\r\n    return grid\r\n}\r\n\r\nexport const setParentNode = (grid, {row, col, parent}) => {\r\n    grid = grid.slice()\r\n    grid[row][col].parent = parent;\r\n    return grid\r\n}\r\n\r\nexport const applyMaskedNode = (grid, statistics, {row, col}, maskedNode) => {\r\n    grid = grid.slice()\r\n    \r\n    grid[row][col] = { ...maskedNode };\r\n    return { \r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numWall: statistics.numWall + (maskedNode.isWallNode ? 1 : 0),\r\n        }\r\n    }\r\n}\r\n\r\nexport const calculateMaskedStatistic = (grid, statistics, {row, col}) => {\r\n    const newMaskedNode = grid[row][col]\r\n    return {\r\n        statistics: {\r\n            ...statistics,\r\n            numWall: statistics.numWall - (newMaskedNode.isWallNode ? 1 : 0),\r\n        }\r\n    }\r\n}\r\n\r\nexport const generateWalls = (grid, statistics) => {\r\n    grid = grid.slice()\r\n    const p = 0.3  // probability that a node becomes a wall node \r\n    let numWall = 0\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            const node = grid[i][j]\r\n            if (!node.isStartNode && !node.isEndNode && Math.random() <= p) {\r\n                node.isWallNode = true\r\n                numWall++\r\n            } else {\r\n                node.isWallNode = false\r\n            }\r\n        }\r\n    }\r\n    return { \r\n        grid, \r\n        statistics: {\r\n            ...statistics,\r\n            numWall\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearBoard = (grid, statistics) => {\r\n    grid = grid.slice()\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            const node = grid[i][j]\r\n            if (!node.isStartNode && !node.isEndNode) {\r\n                grid[i][j] = new Node()\r\n            } else {\r\n                node.isWallNode = false\r\n                node.isVisitedNode = false\r\n                node.isPathNode = false\r\n            }\r\n        }\r\n    }\r\n    return { \r\n        grid, \r\n        statistics: initializeStatistics(grid.length, grid[0].length)\r\n    }\r\n}\r\n\r\nexport const clearPath = (grid, statistics) => {\r\n    grid = grid.slice()\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            const node = grid[i][j]\r\n            node.isPathNode = false\r\n            node.isVisitedNode = false\r\n            node.isFrontierNode = false\r\n        }\r\n    }\r\n    return { \r\n        grid, \r\n        statistics: {\r\n            ...statistics,\r\n            numPath: 0,\r\n            numFrontier: 0,\r\n            numVisited: 0\r\n        }\r\n    }\r\n}\r\n\r\n// Utilities for generating statistics\r\nexport const initializeStatistics = (numRows, numCols) => {\r\n    return new Statistic(numRows * numCols)\r\n}","// create and export types for our actions\r\nexport const SET_BFS_ALGORITHM = \"SET_BFS_ALGORITHM\"\r\nexport const SET_DFS_ALGORITHM = \"SET_DFS_ALGORITHM\"\r\nexport const SET_ASTAR_ALGORITHM = \"SET_ASTAR_ALGORITHM\"\r\nexport const SET_GREEDY_ALGORITHM = \"SET_GREEDY_ALGORITHM\"\r\nexport const TOGGLE_VISITED_NODE = \"TOGGLE_VISITED_NODE\"\r\nexport const TOGGLE_FRONTIER_NODE = \"TOGGLE_FRONTIER_NODE\"\r\nexport const TOGGLE_WALL_NODE = \"TOGGLE_WALL_NODE\"\r\nexport const TOGGLE_PATH_NODE = \"TOGGLE_PATH_NODE\"\r\nexport const SET_ALGORITHM_STATE = \"SET_ALGORITHM_STATE\"\r\nexport const CLEAR_ALGORITHM_STATE = \"CLEAR_ALGORITHM_STATE\"\r\nexport const SET_START_NODE = \"SET_START_NODE\"\r\nexport const SET_END_NODE = \"SET_END_NODE\"\r\nexport const RUN_ALGORITHM = \"RUN_ALGORITHM\"\r\nexport const READY_ALGORITHM = \"READY_ALGORITHM\"\r\nexport const PAUSE_ALGORITHM = \"PAUSE_ALGORITHM\"\r\nexport const COMPLETE_ALGORITHM = \"COMPLETE_ALGORITHM\" \r\nexport const SET_PARENT_NODE = \"SET_PARENT_NODE\"\r\nexport const GENERATE_WALLS = \"GENERATE_WALLS\"\r\nexport const CLEAR_BOARD = \"CLEAR_BOARD\"\r\nexport const CLEAR_PATH = \"CLEAR_PATH\"\r\nexport const SET_DRAGGED_NODE = \"SET_DRAGGED_NODE\"\r\nexport const CLEAR_DRAGGED_NODE = \"CLEAR_DRAGGED_NODE\"\r\nexport const SET_START_MASKED_NODE = \"SET_START_MASKED_NODE\"\r\nexport const APPLY_START_MASKED_NODE = \"APPLY_START_MASKED_NODE\"\r\nexport const RERUN_ALGORITHM = \"RERUN_ALGORITHM\"\r\nexport const RESET_START_MASKED_NODE = \"RESET_START_MASKED_NODE\"\r\nexport const SET_END_MASKED_NODE = \"SET_END_MASKED_NODE\"\r\nexport const APPLY_END_MASKED_NODE = \"APPLY_END_MASKED_NODE\"\r\nexport const RESET_END_MASKED_NODE = \"RESET_END_MASKED_NODE\"\r\n\r\n\r\n// action creators for grid state\r\nexport const rerunAlgorithm = (algorithmSelected) => {\r\n    return {\r\n        type: RERUN_ALGORITHM,\r\n        payload: { algorithmSelected }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_VISITED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_FRONTIER_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_WALL_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_PATH_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setParentNode = (row, col, parent) => {\r\n    return {\r\n        type: SET_PARENT_NODE,\r\n        payload: {row, col, parent}\r\n    }\r\n}\r\n\r\nexport const generateWalls = () => {\r\n    return {\r\n        type: GENERATE_WALLS\r\n    }\r\n}\r\n\r\nexport const clearBoard = () => {\r\n    return {\r\n        type: CLEAR_BOARD\r\n    }\r\n}\r\n\r\nexport const clearPath = () => {\r\n    return {\r\n        type: CLEAR_PATH\r\n    }\r\n}\r\n\r\n// action creators for algorithm state\r\n\r\nexport const runAlgorithm = () => {\r\n    return {\r\n        type: RUN_ALGORITHM,\r\n    }\r\n};\r\n\r\nexport const readyAlgorithm = () => {\r\n    return {\r\n        type: READY_ALGORITHM,\r\n    }\r\n};\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return {\r\n        type: PAUSE_ALGORITHM,\r\n    }\r\n};\r\n\r\nexport const completeAlgorithm = () => {\r\n    return {\r\n        type: COMPLETE_ALGORITHM,\r\n    }\r\n};\r\n\r\n\r\nexport const setBFSAlgorithm = () => {\r\n    return {\r\n        type: SET_BFS_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setDFSAlgorithm = () => {\r\n    return {\r\n        type: SET_DFS_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setAStarAlgorithm = () => {\r\n    return {\r\n        type: SET_ASTAR_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setGreedyAlgorithm = () => {\r\n    return {\r\n        type: SET_GREEDY_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setAlgorithmState = (algorithmState) => {\r\n    return {\r\n        type: SET_ALGORITHM_STATE,\r\n        payload: algorithmState\r\n    }\r\n}\r\n\r\nexport const clearAlgorithmState = () => {\r\n    return {\r\n        type: CLEAR_ALGORITHM_STATE\r\n    }\r\n}\r\n\r\n// action creators for tracking nodes\r\nexport const setStartNode = (row, col) => {\r\n    return {\r\n        type: SET_START_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setEndNode = (row, col) => {\r\n    return {\r\n        type: SET_END_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setDraggedNode = (row, col) => {\r\n    return {\r\n        type: SET_DRAGGED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const clearDraggedNode = (row, col) => {\r\n    return {\r\n        type: CLEAR_DRAGGED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setStartMaskedNode = (row, col) => {\r\n    return {\r\n        type: SET_START_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\n\r\nexport const applyStartMaskedNode = (row, col) => {\r\n    return {\r\n        type: APPLY_START_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setEndMaskedNode = (row, col) => {\r\n    return {\r\n        type: SET_END_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\n\r\nexport const applyEndMaskedNode = (row, col) => {\r\n    return {\r\n        type: APPLY_END_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const resetStartMaskedNode = () => {\r\n    return {\r\n        type: RESET_START_MASKED_NODE\r\n    }\r\n}\r\n\r\nexport const resetEndMaskedNode = () => {\r\n    return {\r\n        type: RESET_END_MASKED_NODE\r\n    }\r\n}","import React from 'react'\r\nimport '../css/Node.css'\r\nimport { connect } from 'react-redux'\r\nimport { toggleWallNode, setDraggedNode, clearDraggedNode, setStartNode, setEndNode, setStartMaskedNode, setEndMaskedNode, \r\n    setParentNode, rerunAlgorithm, clearPath, applyStartMaskedNode, applyEndMaskedNode, resetEndMaskedNode, resetStartMaskedNode } from '../actions'\r\nimport { nodeEquals, isAlgorithmCompleted, isAlgorithmUnselected, isAlgorithmReady } from '../utils/AlgorithmUtil'\r\n\r\nfunction Node({isVisitedNode, isWallNode, isEndNode, isStartNode, isFrontierNode, isPathNode,\r\n    toggleWallNode, row, col, startNode, endNode, draggedNode, setDraggedNode, clearDraggedNode,\r\n    setStartNode, setEndNode, setStartMaskedNode, applyStartMaskedNode, algorithmSelected, rerunAlgorithm,\r\n    clearPath, setEndMaskedNode, applyEndMaskedNode }) {\r\n\r\n    const handleMouseOver = () => {\r\n        if (draggedNode) {  // if there was a node being dragged to this position\r\n            if (draggedNode.isWallNode && !isVisitedNode && !isFrontierNode && !isWallNode && !isStartNode && !isEndNode) {\r\n                toggleWallNode(row, col)  // only allow toggling of wall boolean for unvisited/grey nodes and wall nodes\r\n            } else if (draggedNode.isStartNode && !isEndNode) {  // do not allow dragging start node over end node\r\n                applyStartMaskedNode(draggedNode.row, draggedNode.col)  // restore masked node properties back to the node we came from\r\n                if (isAlgorithmCompleted()) \r\n                    clearPath()\r\n                setStartMaskedNode(row, col)  // save the state of this node, to be reapplied to this node if we drag to somewhere else\r\n                setStartNode(row, col)  // replace the state of this node\r\n                setDraggedNode(row, col)  // update the dragged node to be this node\r\n\r\n                if (isAlgorithmCompleted()) {  // if the algorithm has status completed, run the algorithm instantly\r\n                    rerunAlgorithm(algorithmSelected)  // draw the new path, visited and frontier nodes for this new start position\r\n                }\r\n            } else if (draggedNode.isEndNode && !isStartNode) {  // do not allow dragging end node over start node\r\n                applyEndMaskedNode(draggedNode.row, draggedNode.col)  // restore masked node properties back to the node we came from\r\n                if (isAlgorithmCompleted()) \r\n                    clearPath()\r\n                setEndMaskedNode(row, col)  // save the state of this node, to be reapplied to this node if we drag to somewhere else\r\n                setEndNode(row, col)  // replace the state of this node\r\n                setDraggedNode(row, col)  // update the dragged node to be this node\r\n\r\n                if (isAlgorithmCompleted()) {  // if the algorithm has status completed, run the algorithm instantly\r\n                    rerunAlgorithm(algorithmSelected)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleMouseDown = () => {\r\n        if (isAlgorithmReady() || isAlgorithmCompleted() || isAlgorithmUnselected()) {  // only allow interactions with the grid when not running\r\n            if (!nodeEquals([row, col], startNode) && !nodeEquals([row, col], endNode) && !isVisitedNode && !isFrontierNode && !isPathNode)\r\n                toggleWallNode(row, col)\r\n            setDraggedNode(row, col)  // this is the current node being dragged\r\n        }\r\n    }\r\n\r\n    const handleMouseUp = () => {\r\n        clearDraggedNode()\r\n    }\r\n\r\n    let nodeClass\r\n    if (isStartNode) {\r\n        nodeClass = 'start'\r\n    } else if (isEndNode) {\r\n        nodeClass = 'end'\r\n    } else if (isWallNode) {\r\n        nodeClass = 'wall'\r\n    } else if (isPathNode) {\r\n        nodeClass = 'path'\r\n    } else if (isVisitedNode) {\r\n        nodeClass = 'visited'\r\n    } else if (isFrontierNode) {\r\n        nodeClass = 'frontier'\r\n    } else {\r\n        nodeClass = 'unvisited'\r\n    }\r\n\r\n    return (\r\n        <div className={`node ${nodeClass} unselectable`} onMouseOver={handleMouseOver}\r\n            onMouseUp={handleMouseUp} onMouseDown={handleMouseDown} >\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isVisitedNode: state.board.grid[ownProps.row][ownProps.col].isVisitedNode,\r\n        isWallNode: state.board.grid[ownProps.row][ownProps.col].isWallNode,\r\n        isStartNode: state.board.grid[ownProps.row][ownProps.col].isStartNode,\r\n        isEndNode: state.board.grid[ownProps.row][ownProps.col].isEndNode,\r\n        isPathNode: state.board.grid[ownProps.row][ownProps.col].isPathNode,\r\n        isFrontierNode: state.board.grid[ownProps.row][ownProps.col].isFrontierNode,\r\n        startNode: state.board.startNode,\r\n        endNode: state.board.endNode,\r\n        draggedNode: state.board.draggedNode,\r\n        algorithmSelected: state.algorithmSelected,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleWallNode: (row, col) => dispatch(toggleWallNode(row, col)),\r\n        setParentNode: (row, col) => dispatch(setParentNode(row, col)),\r\n        setDraggedNode: (row, col) => dispatch(setDraggedNode(row, col)),\r\n        clearDraggedNode: () => dispatch(clearDraggedNode()),\r\n        setStartNode: (row, col) => dispatch(setStartNode(row, col)),\r\n        setEndNode: (row, col) => dispatch(setEndNode(row, col)),\r\n        setStartMaskedNode: (row, col) => dispatch(setStartMaskedNode(row, col)),\r\n        setEndMaskedNode: (row, col) => dispatch(setEndMaskedNode(row, col)),\r\n        applyStartMaskedNode: (row, col) => dispatch(applyStartMaskedNode(row, col)),\r\n        applyEndMaskedNode: (row, col) => dispatch(applyEndMaskedNode(row, col)),\r\n        resetStartMaskedNode: (row, col) => dispatch(resetStartMaskedNode(row, col)),\r\n        resetEndMaskedNode: (row, col) => dispatch(resetEndMaskedNode(row, col)),\r\n        rerunAlgorithm: (algorithmSelected) => dispatch(rerunAlgorithm(algorithmSelected)),\r\n        clearPath: () => dispatch(clearPath()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { generateRowKey, generateCellKey } from '../utils/GridUtil'\r\nimport Node from './Node'\r\nimport '../css/Grid.css'\r\n\r\nfunction Grid(props) {\r\n    return (\r\n        <div className='grid'>\r\n            {props.grid.map((cellRow, row) => \r\n                <div className='grid-row' key={generateRowKey(row)}>\r\n                    {cellRow.map((cell, col) => \r\n                        <Node row={row} col={col} key={generateCellKey(row, col)} />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        grid: state.board.grid\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid)\r\n","import React from 'react'\r\nimport '../css/Navbar.css'\r\n\r\n\r\nfunction Navbar({ algorithmStatus, algorithmSelected, runAlgorithm, generateWalls, clearBoard, clearPath,\r\n    readyAlgorithm, clearAlgorithmState, resetStartMaskedNode, resetEndMaskedNode, toggleShowCarousel }) {\r\n\r\n    const handleClickRun = () => {\r\n        runAlgorithm()\r\n    }\r\n\r\n    const handleClickGenerateWalls = () => {\r\n        generateWalls()\r\n    }\r\n\r\n    const handleClickClearPath = () => {\r\n        clearPath()\r\n        // discard the state saved by any algorithm pauses\r\n        clearAlgorithmState()\r\n        readyAlgorithm()\r\n    }\r\n\r\n    const handleClickClearBoard = () => {\r\n        clearBoard()\r\n        clearAlgorithmState()\r\n        readyAlgorithm()\r\n        resetStartMaskedNode()\r\n        resetEndMaskedNode()\r\n    }\r\n\r\n    let runButtonText;\r\n    let runButtonClass;\r\n    let runButtonDisabled = false\r\n    let generateWallsButtonDisabled = false\r\n    if (algorithmStatus === 'UNSELECTED') {\r\n        runButtonText = 'Select an Algorithm'\r\n        runButtonClass = 'unselected'\r\n        runButtonDisabled = true\r\n    } else if (algorithmStatus === 'READY') {\r\n        runButtonText = 'Run'\r\n        runButtonClass = 'run'\r\n    } else if (algorithmStatus === 'PAUSED') {\r\n        runButtonText = 'Resume'\r\n        runButtonClass = 'resume'\r\n        generateWallsButtonDisabled = true\r\n    } else if (algorithmStatus === 'RUNNING') {\r\n        runButtonText = 'Pause'\r\n        runButtonClass = 'pause'\r\n        generateWallsButtonDisabled = true\r\n    } else {  // if 'COMPLETED'\r\n        runButtonText = 'Completed'\r\n        runButtonClass = 'completed'\r\n        runButtonDisabled = true\r\n    }\r\n\r\n    return (\r\n        <nav className='navbar'>\r\n            <div className='navbar-list-container'>\r\n                <ul className='navbar-list'>\r\n                    <li className='navbar-item'>\r\n                        <button className={`navbar-button ${generateWallsButtonDisabled ? 'navbar-disabled-button' : 'navbar-normal-button'}`} \r\n                            onClick={handleClickGenerateWalls} disabled={generateWallsButtonDisabled}>Generate Walls</button>\r\n                    </li>\r\n                    <li className='navbar-item'>\r\n                        <button  className={`navbar-button ${generateWallsButtonDisabled ? 'navbar-disabled-button' : 'navbar-normal-button'}`}\r\n                            disabled={generateWallsButtonDisabled} onClick={toggleShowCarousel}>Select Algorithm</button>\r\n                    </li>\r\n                    <li className='navbar-item'>\r\n                        <button className={`navbar-button navbar-run-button ${runButtonClass}`} disabled={runButtonDisabled} onClick={handleClickRun}>\r\n                            {runButtonText}\r\n                        </button>\r\n                    </li>  \r\n                    <li className='navbar-item'>\r\n                        <button  className='navbar-button navbar-normal-button' onClick={handleClickClearPath}>Clear Path</button>\r\n                    </li>\r\n                    <li className='navbar-item'>\r\n                        <button  className='navbar-button navbar-normal-button' onClick={handleClickClearBoard}>Clear Board</button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../css/Statbar.css'\r\n\r\nfunction Statbar({ statistics }) {\r\n    return (\r\n        <div className='statbar'>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node start'></div>\r\n                    <span className='stat-description'>Start</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node end'></div>\r\n                    <span className='stat-description'>End</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node unvisited'></div>\r\n                    <span className='stat-description'>Unvisited</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numTotal - statistics.numVisited - statistics.numWall - statistics.numFrontier}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node visited'></div>\r\n                    <span className='stat-description'>Visited</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numVisited}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node frontier'></div>\r\n                    <span className='stat-description'>Frontier</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numFrontier}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node wall'></div>\r\n                    <span className='stat-description'>Wall</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numWall}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node path'></div>\r\n                    <span className='stat-description'>Path</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numPath}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        statistics: state.board.statistics,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Statbar)\r\n","import React, { useState } from 'react'\r\nimport '../css/Carousel.css'\r\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from \"react-icons/fa\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\nimport { isAlgorithmUnselected } from '../utils/AlgorithmUtil';\r\n\r\nfunction Carousel({ toggleShowCarousel, setBFSAlgorithm, readyAlgorithm, setDFSAlgorithm }) {\r\n    const algorithms = [{name: 'BFS', header: 'BFS Algorithm', dispatch: setBFSAlgorithm}, {name: 'DFS', header: 'DFS Algorithm', dispatch: setDFSAlgorithm}]\r\n    const [ slideNum, setSlideNum ] = useState(0)\r\n\r\n    // Custom modulo function. The default Javascript modulo operator that gives -3 % 4 = -3. Instead, we want it to be 1\r\n    const mod = (m, n) => {\r\n        return ((m % n) + n) % n\r\n    }\r\n\r\n    const handleClickSelect = (slideNum) => {\r\n        algorithms[slideNum].dispatch()\r\n        toggleShowCarousel()\r\n        if (isAlgorithmUnselected())\r\n            readyAlgorithm()\r\n    }\r\n\r\n    const handleClickLeft = () => {\r\n        setSlideNum(mod(slideNum - 1, algorithms.length))\r\n    }\r\n\r\n    const handleClickRight = () => {\r\n        setSlideNum(mod(slideNum + 1, algorithms.length))\r\n    }\r\n\r\n    return (\r\n        <div className='carousel-container'>\r\n            <div className='carousel'>\r\n                <h1>{ algorithms[slideNum].header }</h1>\r\n                <AiFillCloseCircle className='window-close-icon' onClick={toggleShowCarousel} />\r\n                <div>\r\n                    <FaArrowAltCircleLeft className='arrow-circle-icon' onClick={handleClickLeft} />\r\n                    {/* <img src={props.algoGIF} alt={props.algoName} /> */}\r\n                    <FaArrowAltCircleRight className='arrow-circle-icon' onClick={handleClickRight} />\r\n                </div>\r\n                <p className='algorithm-description'>\r\n                    This is a description of the algorithm.\r\n                </p>\r\n                <button className='carousel-select-button' onClick={() => handleClickSelect(slideNum)}>Select</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Carousel\r\n","import React, { useState } from 'react'\r\nimport Grid from './Grid'\r\nimport Navbar from './Navbar'\r\nimport Statbar from './Statbar'\r\nimport Carousel from './Carousel'\r\nimport '../css/Menu.css'\r\nimport { setBFSAlgorithm, toggleVisitedNode, toggleFrontierNode,\r\n    setAlgorithmState, readyAlgorithm, runAlgorithm, pauseAlgorithm, completeAlgorithm,\r\n    togglePathNode, setParentNode, generateWalls, clearBoard, clearPath, clearAlgorithmState, \r\n    resetStartMaskedNode, resetEndMaskedNode, setDFSAlgorithm } from '../actions'\r\nimport { connect } from 'react-redux'\r\nimport { runBFS } from '../utils/Algorithms/BFS'\r\nimport { runDFS } from '../utils/Algorithms/DFS'\r\nimport { isAlgorithmRunning, isAlgorithmCompleted, isAlgorithmReady } from '../utils/AlgorithmUtil'\r\n\r\nfunction Menu(props) {\r\n\r\n    const [ showCarousel, setShowCarousel ] = useState(false)\r\n\r\n    const runAlgorithm = async () => {\r\n\r\n        if (isAlgorithmRunning()) {\r\n            props.pauseAlgorithm()\r\n            return\r\n        }\r\n        \r\n        props.runAlgorithm()  // Change algorithm status to running\r\n        \r\n        let state;\r\n        switch (props.algorithmSelected) {\r\n            case 'BFS':\r\n                state = await runBFS(props.algorithmState, props.grid, props.startNode, props.endNode, props.toggleVisitedNode, \r\n                    props.toggleFrontierNode, props.togglePathNode, props.completeAlgorithm, props.setParentNode, props.clearAlgorithmState)\r\n                break\r\n            case 'DFS':\r\n                state = await runDFS(props.algorithmState, props.grid, props.startNode, props.endNode, props.toggleVisitedNode, \r\n                    props.toggleFrontierNode, props.togglePathNode, props.completeAlgorithm, props.setParentNode, props.clearAlgorithmState)\r\n                break\r\n            case 'ASTAR':\r\n                break\r\n            case 'GREEDY':\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n        // We have to clear the algorithm state if it is completed or sent back to the ready state from the running state\r\n        // this happens when we click clearBoard or clearPath buttons while the algorithm is still running\r\n        if (isAlgorithmCompleted() || isAlgorithmReady()) {\r\n            props.clearAlgorithmState()\r\n        } else {\r\n            props.setAlgorithmState(state)\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar runAlgorithm={runAlgorithm} \r\n                algorithmStatus={props.algorithmStatus}\r\n                algorithmSelected={props.algorithmSelected}\r\n                generateWalls={props.generateWalls}\r\n                clearBoard={props.clearBoard}\r\n                clearPath={props.clearPath}\r\n                readyAlgorithm={props.readyAlgorithm}\r\n                clearAlgorithmState={props.clearAlgorithmState}\r\n                resetStartMaskedNode={props.resetStartMaskedNode}\r\n                resetEndMaskedNode={props.resetEndMaskedNode}\r\n                toggleShowCarousel={() => setShowCarousel(!showCarousel)} />\r\n            <div className='grid-container'>\r\n                <Grid />\r\n            </div>\r\n            <div className='statbar-container'>\r\n                <Statbar />\r\n            </div>\r\n            {showCarousel && <Carousel toggleShowCarousel={() => setShowCarousel(!showCarousel)} \r\n                setBFSAlgorithm={props.setBFSAlgorithm} readyAlgorithm={props.readyAlgorithm} setDFSAlgorithm={props.setDFSAlgorithm} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setBFSAlgorithm: () => dispatch(setBFSAlgorithm()),\r\n        setDFSAlgorithm: () => dispatch(setDFSAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        setAlgorithmState: (state) => dispatch(setAlgorithmState(state)),\r\n        clearAlgorithmState: () => dispatch(clearAlgorithmState()),\r\n        readyAlgorithm: () => dispatch(readyAlgorithm()),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        completeAlgorithm: () => dispatch(completeAlgorithm()),\r\n        setParentNode: (row, col, parent) => dispatch(setParentNode(row, col, parent)),\r\n        generateWalls: () => dispatch(generateWalls()),\r\n        clearBoard: () => dispatch(clearBoard()),\r\n        clearPath: () => dispatch(clearPath()),\r\n        resetStartMaskedNode: () => dispatch(resetStartMaskedNode()),\r\n        resetEndMaskedNode: () => dispatch(resetEndMaskedNode()),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        grid: state.board.grid,\r\n        algorithmSelected: state.algorithmSelected,\r\n        startNode: state.board.startNode,\r\n        endNode: state.board.endNode,\r\n        algorithmState: state.algorithmState,\r\n        algorithmStatus: state.algorithmStatus,\r\n        statistics: state.board.statistics,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu)\r\n","import '../css/App.css';\nimport Menu from './Menu';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\"\r\nimport { generateEmptyGrid, setEndNode, setFrontierNode, setPathNode, setStartNode, setVisitedNode, setWallNode,\r\n    setParentNode, generateWalls, clearBoard, clearPath, initializeStatistics, Node, applyMaskedNode, generateRerunAlgorithmGrid, calculateMaskedStatistic } from \"../utils/GridUtil\"\r\nimport { SET_BFS_ALGORITHM, SET_ASTAR_ALGORITHM, SET_DFS_ALGORITHM, SET_GREEDY_ALGORITHM,\r\n    TOGGLE_FRONTIER_NODE, TOGGLE_PATH_NODE, TOGGLE_VISITED_NODE, TOGGLE_WALL_NODE,\r\n    SET_ALGORITHM_STATE, CLEAR_ALGORITHM_STATE, SET_START_NODE, SET_END_NODE, READY_ALGORITHM, COMPLETE_ALGORITHM,\r\n    PAUSE_ALGORITHM, RUN_ALGORITHM, SET_PARENT_NODE, GENERATE_WALLS, CLEAR_BOARD, CLEAR_PATH, SET_DRAGGED_NODE, \r\n    CLEAR_DRAGGED_NODE, SET_START_MASKED_NODE, APPLY_START_MASKED_NODE, RERUN_ALGORITHM, RESET_START_MASKED_NODE,\r\n    SET_END_MASKED_NODE, APPLY_END_MASKED_NODE, RESET_END_MASKED_NODE } from '../actions'\r\n\r\nconst numRows = 20  // Grid Dimensions\r\nconst numCols = 50\r\nconst start = [9, 15]  // Start Node\r\nconst end = [9, 35]  // End Node\r\n\r\nfunction board(state = { grid: generateEmptyGrid(numRows, numCols, start, end), statistics: initializeStatistics(numRows, numCols), \r\n        draggedNode: null, startMaskedNode: new Node(), endMaskedNode: new Node(), startNode: start, endNode: end }, action) {\r\n    switch(action.type) {\r\n        case TOGGLE_VISITED_NODE: {\r\n            const { grid, statistics } = setVisitedNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case TOGGLE_WALL_NODE: {\r\n            const { grid, statistics } = setWallNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case TOGGLE_FRONTIER_NODE: {\r\n            const { grid, statistics } = setFrontierNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case TOGGLE_PATH_NODE: {\r\n            const { grid, statistics } = setPathNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case SET_START_NODE:\r\n            return {\r\n                ...state,\r\n                grid: setStartNode(state.grid, action.payload),\r\n                startNode: [action.payload.row, action.payload.col]\r\n            }\r\n        case SET_END_NODE:\r\n            return {\r\n                ...state,\r\n                grid: setEndNode(state.grid, action.payload),\r\n                endNode: [action.payload.row, action.payload.col]\r\n            }\r\n        case SET_PARENT_NODE:\r\n            return {\r\n                ...state,\r\n                grid: setParentNode(state.grid, action.payload)\r\n            }\r\n        case GENERATE_WALLS: {\r\n            const { grid, statistics } = generateWalls(state.grid, state.statistics)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case CLEAR_BOARD: {\r\n            const { grid, statistics } = clearBoard(state.grid, state.statistics)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case CLEAR_PATH: {\r\n            const { grid, statistics } = clearPath(state.grid, state.statistics)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case SET_DRAGGED_NODE:\r\n            return {\r\n                ...state,\r\n                draggedNode: {\r\n                    ...state.grid[action.payload.row][action.payload.col],\r\n                    row: action.payload.row,\r\n                    col: action.payload.col,\r\n                }\r\n            }\r\n        case CLEAR_DRAGGED_NODE:\r\n            return {\r\n                ...state,\r\n                draggedNode: null\r\n            }\r\n        case SET_START_MASKED_NODE: {\r\n            const { statistics } = calculateMaskedStatistic(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                statistics,\r\n                startMaskedNode: {\r\n                    ...state.grid[action.payload.row][action.payload.col]\r\n                }\r\n            }\r\n        }\r\n        case APPLY_START_MASKED_NODE: {\r\n            const { grid, statistics } = applyMaskedNode(state.grid, state.statistics, action.payload, state.startMaskedNode)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics \r\n            }\r\n        }\r\n        case RESET_START_MASKED_NODE: \r\n            return {\r\n                ...state,\r\n                startMaskedNode: new Node()\r\n            }\r\n        case SET_END_MASKED_NODE: {\r\n            const { statistics } = calculateMaskedStatistic(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                statistics,\r\n                endMaskedNode: {\r\n                    ...state.grid[action.payload.row][action.payload.col]\r\n                }\r\n            }\r\n        }\r\n        case APPLY_END_MASKED_NODE: {\r\n            const { grid, statistics } = applyMaskedNode(state.grid, state.statistics, action.payload, state.endMaskedNode)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics \r\n            }\r\n        }\r\n        case RESET_END_MASKED_NODE: \r\n            return {\r\n                ...state,\r\n                endMaskedNode: new Node()\r\n            }\r\n        case RERUN_ALGORITHM: {\r\n            const { grid, statistics } = generateRerunAlgorithmGrid(state.grid, state.startNode, \r\n                state.endNode, action.payload.algorithmSelected)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} \r\n\r\nfunction algorithmStatus(state = 'UNSELECTED', action) {\r\n    switch(action.type) {\r\n        case READY_ALGORITHM:\r\n            return 'READY';\r\n        case RUN_ALGORITHM:\r\n            return 'RUNNING';\r\n        case PAUSE_ALGORITHM:\r\n            return 'PAUSED';\r\n        case COMPLETE_ALGORITHM:\r\n            return 'COMPLETED';\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction algorithmSelected(state = null, action) {  // we set initial to BFS for now to test\r\n    switch(action.type) {\r\n        case SET_BFS_ALGORITHM:\r\n            return 'BFS';\r\n        case SET_ASTAR_ALGORITHM:\r\n            return 'ASTAR';\r\n        case SET_DFS_ALGORITHM:\r\n            return 'DFS';\r\n        case SET_GREEDY_ALGORITHM:\r\n            return 'GREEDY';\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction algorithmState(state = null, action) {  \r\n    switch(action.type) {\r\n        case SET_ALGORITHM_STATE:\r\n            return action.payload;\r\n        case CLEAR_ALGORITHM_STATE:\r\n            return null;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst reducer = combineReducers({\r\n    board,\r\n    algorithmStatus,\r\n    algorithmSelected,\r\n    algorithmState\r\n})\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux';\nimport reducer from './reducers'\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nexport default store\n"],"sourceRoot":""}