{"version":3,"sources":["utils/AlgorithmUtil.js","utils/Algorithms/AStar.js","utils/Algorithms/BFS.js","utils/Algorithms/DFS.js","utils/Algorithms/Greedy.js","utils/GridUtil.js","actions/index.js","components/Node.js","components/Grid.js","components/Navbar.js","components/Statbar.js","components/Carousel.js","components/Menu.js","components/App.js","reducers/index.js","index.js"],"names":["isAlgorithmRunning","store","getState","algorithmStatus","isAlgorithmUnselected","isAlgorithmCompleted","isAlgorithmReady","nodeEquals","node_1","node_2","row","col","getNeighbors","node","neighbors","Array","dy","dx","i","length","push","shouldAddNode","grid","m","n","j","isVisitedNode","isWallNode","isFrontierNode","tracePath","endNode","togglePathNode","a","stack","buckets","Stack","parent","isEmpty","pop","sleep","setPath","isPathNode","duration","Promise","resolve","setTimeout","calculateManhattanDistance","start","end","Math","abs","runAStar","priorityQueue","startNode","toggleVisitedNode","toggleFrontierNode","completeAlgorithm","setParentNode","setEstimateValues","PriorityQueue","f","h","enqueue","currNode","dequeue","neighbor","g","runBFS","queue","Queue","runDFS","runGreedy","Node","this","isStartNode","isEndNode","Statistic","numTotal","numVisited","numFrontier","numWall","numPath","generateEmptyGrid","numRows","numCols","calculateStatistics","statistics","generateRerunAlgorithmGrid","algorithmSelected","slice","rerunBFS","rerunDFS","rerunAStar","rerunGreedy","setVisitedNode","setWallNode","setFrontierNode","setPathNode","setStartNode","initializeStartNode","setEndNode","initializeEndNode","applyMaskedNode","maskedNode","calculateMaskedStatistic","newMaskedNode","generateWalls","random","clearBoard","initializeStatistics","clearPath","SET_BFS_ALGORITHM","SET_DFS_ALGORITHM","SET_ASTAR_ALGORITHM","SET_GREEDY_ALGORITHM","TOGGLE_VISITED_NODE","TOGGLE_FRONTIER_NODE","TOGGLE_WALL_NODE","TOGGLE_PATH_NODE","SET_ALGORITHM_STATE","CLEAR_ALGORITHM_STATE","SET_START_NODE","SET_END_NODE","RUN_ALGORITHM","READY_ALGORITHM","PAUSE_ALGORITHM","COMPLETE_ALGORITHM","SET_PARENT_NODE","GENERATE_WALLS","CLEAR_BOARD","CLEAR_PATH","SET_DRAGGED_NODE","CLEAR_DRAGGED_NODE","SET_START_MASKED_NODE","APPLY_START_MASKED_NODE","RERUN_ALGORITHM","RESET_START_MASKED_NODE","SET_END_MASKED_NODE","APPLY_END_MASKED_NODE","RESET_END_MASKED_NODE","SET_ESTIMATE_VALUES","type","payload","resetStartMaskedNode","resetEndMaskedNode","connect","state","ownProps","board","draggedNode","dispatch","toggleWallNode","setDraggedNode","clearDraggedNode","setStartMaskedNode","setEndMaskedNode","applyStartMaskedNode","applyEndMaskedNode","rerunAlgorithm","nodeClass","className","onMouseOver","onMouseUp","onMouseDown","props","map","cellRow","cell","toString","generateCellKey","generateRowKey","Navbar","runButtonText","runButtonClass","runAlgorithm","readyAlgorithm","clearAlgorithmState","toggleShowCarousel","runButtonDisabled","generateWallsButtonDisabled","onClick","disabled","Carousel","setBFSAlgorithm","algorithms","name","header","setDFSAlgorithm","setAStarAlgorithm","setGreedyAlgorithm","useState","slideNum","setSlideNum","mod","handleClickSelect","algorithmState","setAlgorithmState","pauseAlgorithm","showCarousel","setShowCarousel","App","reducer","combineReducers","startMaskedNode","endMaskedNode","action","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbfcf1cc.chunk.js","sourcesContent":["import store from \"../\"\r\nimport buckets from 'buckets-js'\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    return store.getState().algorithmStatus === 'RUNNING'\r\n}\r\n\r\nexport const isAlgorithmUnselected = () => {\r\n    return store.getState().algorithmStatus === 'UNSELECTED'\r\n}\r\n\r\nexport const isAlgorithmCompleted = () => {\r\n    return store.getState().algorithmStatus === 'COMPLETED'\r\n}\r\n\r\nexport const isAlgorithmReady = () => {\r\n    return store.getState().algorithmStatus === 'READY'\r\n}\r\n\r\nexport const nodeEquals = (node_1, node_2) => {\r\n    return node_1.row === node_2.row && node_1.col === node_2.col\r\n}\r\n\r\nexport const getNeighbors = (node) => {\r\n    const neighbors = new Array(0)\r\n    const dy = [0, 0, -1, 1]  // directions of i\r\n    const dx = [1, -1, 0, 0]  // directions of j\r\n    for (let i = 0; i < dy.length; i++) {\r\n        neighbors.push({ row: node.row + dy[i], col: node.col + dx[i] })\r\n    }\r\n    return neighbors\r\n}\r\n\r\n// Enqueue the Node only if it is within the range of the grid, not visited, not a frontier and not a wall node\r\nexport const shouldAddNode = (node, grid) => {\r\n    const m = grid.length\r\n    const n = grid[0].length\r\n    const i = node.row\r\n    const j = node.col\r\n    return i >= 0 && i < m && j >= 0 && j < n && !grid[i][j].isVisitedNode && !grid[i][j].isWallNode && !grid[i][j].isFrontierNode\r\n}\r\n\r\nexport const tracePath = async (endNode, grid, togglePathNode) => {\r\n    let node = endNode\r\n    const stack = buckets.Stack() \r\n    while (node != null) {\r\n        stack.push(node)\r\n        node = grid[node.row][node.col].parent\r\n    }\r\n    while (!stack.isEmpty()) {\r\n        node = stack.pop()\r\n        togglePathNode(node.row, node.col)\r\n        await sleep(40)\r\n    }\r\n}\r\n\r\n// This sets the path immediately\r\n// without having the trace animation (no intervals between each path node animation)\r\nexport const setPath = (endNode, grid) => {\r\n    let node = endNode\r\n    const stack = buckets.Stack() \r\n    while (node != null) {\r\n        stack.push(node)\r\n        node = grid[node.row][node.col].parent\r\n    }\r\n    while (!stack.isEmpty()) {\r\n        node = stack.pop()\r\n        grid[node.row][node.col].isPathNode = true\r\n    }\r\n}\r\n\r\nexport const sleep = (duration) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, duration)\r\n    })\r\n}\r\n\r\nexport const calculateManhattanDistance = (start, end) => {\r\n    return Math.abs(start.row - end.row) + Math.abs(start.col - end.col)\r\n}","import { isAlgorithmRunning, nodeEquals, shouldAddNode, getNeighbors, \r\n    sleep, tracePath, setPath, calculateManhattanDistance } from '../AlgorithmUtil'\r\nimport buckets from 'buckets-js'\r\n\r\nexport const runAStar = async (priorityQueue, grid, startNode, endNode, toggleVisitedNode, toggleFrontierNode,\r\n    togglePathNode, completeAlgorithm, setParentNode, setEstimateValues) => {\r\n        \r\n    // While the algorithm has not been completed or paused\r\n    while (isAlgorithmRunning()) {\r\n        // Create a new priorityQueue if the current algorithm state is empty; this is the first iteration\r\n        if (!priorityQueue) {\r\n            priorityQueue = buckets.PriorityQueue((node_1, node_2) => {\r\n                return grid[node_2.row][node_2.col].f - grid[node_1.row][node_1.col].f\r\n            })\r\n            const h = calculateManhattanDistance(startNode, endNode)\r\n            const g = 0\r\n            const f = h + g\r\n            setEstimateValues(startNode.row, startNode.col, f, g, h)\r\n            priorityQueue.enqueue(startNode)\r\n        }\r\n\r\n        if (priorityQueue.isEmpty()) {  // No path was found\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        // Perform one iteration of A Star\r\n        const currNode = priorityQueue.dequeue()\r\n        toggleVisitedNode(currNode.row, currNode.col)\r\n        toggleFrontierNode(currNode.row, currNode.col)  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            await tracePath(endNode, grid, togglePathNode)\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                const h = calculateManhattanDistance(neighbor, endNode)\r\n                const g = grid[currNode.row][currNode.col].g + 1\r\n                const f = h + g\r\n                setEstimateValues(neighbor.row, neighbor.col, f, g, h)\r\n                toggleFrontierNode(neighbor.row, neighbor.col)\r\n                setParentNode(neighbor.row, neighbor.col, { ...currNode })\r\n                priorityQueue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n        // Timeout ensures that the animation has enough time to render fully\r\n        await sleep(20)\r\n\r\n    }\r\n\r\n    return priorityQueue\r\n\r\n}\r\n\r\n// Run the algorithm on the grid and return the grid state\r\n// corresponding to the completed algorithm \r\n// (rerun does not have the tracing animation; no timeout between each node visit => instantaneous render of traversed graph)\r\nexport const rerunAStar = (grid, startNode, endNode) => {\r\n    const priorityQueue = buckets.PriorityQueue((node_1, node_2) => {\r\n        return grid[node_2.row][node_2.col].f - grid[node_1.row][node_1.col].f\r\n    })\r\n    const h = calculateManhattanDistance(startNode, endNode)\r\n    const g = 0\r\n    const f = h + g\r\n    grid[startNode.row][startNode.col].f = f\r\n    grid[startNode.row][startNode.col].g = g\r\n    grid[startNode.row][startNode.col].h = h\r\n    priorityQueue.enqueue(startNode)\r\n    while (!priorityQueue.isEmpty()) {\r\n        const currNode = priorityQueue.dequeue()\r\n        grid[currNode.row][currNode.col].isVisitedNode = true\r\n        grid[currNode.row][currNode.col].isFrontierNode = false  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            setPath(endNode, grid)\r\n            break\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                const h = calculateManhattanDistance(neighbor, endNode)\r\n                const g = grid[currNode.row][currNode.col].g + 1\r\n                const f = h + g\r\n                grid[neighbor.row][neighbor.col].f = f\r\n                grid[neighbor.row][neighbor.col].g = g\r\n                grid[neighbor.row][neighbor.col].h = h\r\n                grid[neighbor.row][neighbor.col].isFrontierNode = true\r\n                grid[neighbor.row][neighbor.col].parent = { ...currNode }\r\n                priorityQueue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return grid\r\n}","import { isAlgorithmRunning, nodeEquals, shouldAddNode, getNeighbors, \r\n    sleep, tracePath, setPath } from '../AlgorithmUtil'\r\nimport buckets from 'buckets-js'\r\n\r\nexport const runBFS = async (queue, grid, startNode, endNode, toggleVisitedNode, toggleFrontierNode,\r\n    togglePathNode, completeAlgorithm, setParentNode) => {\r\n        \r\n    // While the algorithm has not been completed or paused\r\n    while (isAlgorithmRunning()) {\r\n        \r\n        // Create a new queue if the current algorithm state is empty; this is the first iteration\r\n        if (!queue) {\r\n            queue = buckets.Queue()\r\n            queue.enqueue(startNode)\r\n        }\r\n\r\n        if (queue.isEmpty()) {  // No path was found\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        // Perform one iteration of BFS\r\n        const currNode = queue.dequeue()\r\n        toggleVisitedNode(currNode.row, currNode.col)\r\n        toggleFrontierNode(currNode.row, currNode.col)  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            await tracePath(endNode, grid, togglePathNode)\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                toggleFrontierNode(neighbor.row, neighbor.col)\r\n                setParentNode(neighbor.row, neighbor.col, { ...currNode })\r\n                queue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n        // Timeout ensures that the animation has enough time to render fully\r\n        await sleep(20)\r\n\r\n    }\r\n\r\n    return queue\r\n\r\n}\r\n\r\n// Run the algorithm on the grid and return the grid state\r\n// corresponding to the completed algorithm \r\n// (rerun does not have the tracing animation; no timeout between each node visit => instantaneous render of traversed graph)\r\nexport const rerunBFS = (grid, startNode, endNode) => {\r\n    const queue = buckets.Queue()\r\n    queue.enqueue(startNode)\r\n    while (!queue.isEmpty()) {\r\n        const currNode = queue.dequeue()\r\n        grid[currNode.row][currNode.col].isVisitedNode = true\r\n        grid[currNode.row][currNode.col].isFrontierNode = false  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            setPath(endNode, grid)\r\n            break\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                grid[neighbor.row][neighbor.col].isFrontierNode = true\r\n                grid[neighbor.row][neighbor.col].parent = { ...currNode }\r\n                queue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return grid\r\n}","import { isAlgorithmRunning, nodeEquals, shouldAddNode, getNeighbors, \r\n    sleep, tracePath, setPath } from '../AlgorithmUtil'\r\nimport buckets from 'buckets-js'\r\n\r\nexport const runDFS = async (stack, grid, startNode, endNode, toggleVisitedNode, toggleFrontierNode,\r\n    togglePathNode, completeAlgorithm, setParentNode) => {\r\n        \r\n    // While the algorithm has not been completed or paused\r\n    while (isAlgorithmRunning()) {\r\n        \r\n        // Create a new stack if the current algorithm state is empty; this is the first iteration\r\n        if (!stack) {\r\n            stack = buckets.Stack()\r\n            stack.push(startNode)\r\n        }\r\n\r\n        if (stack.isEmpty()) {  // No path was found\r\n            completeAlgorithm()  // set the status to COMPLETED\r\n            return\r\n        }\r\n\r\n        // Perform one iteration of DFS\r\n        const currNode = stack.pop()\r\n        toggleVisitedNode(currNode.row, currNode.col)\r\n        toggleFrontierNode(currNode.row, currNode.col)  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            await tracePath(endNode, grid, togglePathNode)\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                toggleFrontierNode(neighbor.row, neighbor.col)\r\n                setParentNode(neighbor.row, neighbor.col, { ...currNode })\r\n                stack.push(neighbor)\r\n            }\r\n        }\r\n\r\n        // Timeout ensures that the animation has enough time to render fully\r\n        await sleep(20)\r\n\r\n    }\r\n\r\n    return stack\r\n\r\n}\r\n\r\n// Run the algorithm on the grid and return the grid state\r\n// corresponding to the completed algorithm \r\n// (rerun does not have the tracing animation; no timeout between each node visit => instantaneous render of traversed graph)\r\nexport const rerunDFS = (grid, startNode, endNode) => {\r\n    const stack = buckets.Stack()\r\n    stack.push(startNode)\r\n    while (!stack.isEmpty()) {\r\n        const currNode = stack.pop()\r\n        grid[currNode.row][currNode.col].isVisitedNode = true\r\n        grid[currNode.row][currNode.col].isFrontierNode = false  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            setPath(endNode, grid)\r\n            break\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                grid[neighbor.row][neighbor.col].isFrontierNode = true\r\n                grid[neighbor.row][neighbor.col].parent = { ...currNode }\r\n                stack.push(neighbor)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return grid\r\n}","import { isAlgorithmRunning, nodeEquals, shouldAddNode, getNeighbors, \r\n    sleep, tracePath, setPath, calculateManhattanDistance } from '../AlgorithmUtil'\r\nimport buckets from 'buckets-js'\r\n\r\nexport const runGreedy = async (priorityQueue, grid, startNode, endNode, toggleVisitedNode, toggleFrontierNode,\r\n    togglePathNode, completeAlgorithm, setParentNode, setEstimateValues) => {\r\n        \r\n    // While the algorithm has not been completed or paused\r\n    while (isAlgorithmRunning()) {\r\n        // Create a new priorityQueue if the current algorithm state is empty; this is the first iteration\r\n        if (!priorityQueue) {\r\n            priorityQueue = buckets.PriorityQueue((node_1, node_2) => {\r\n                return grid[node_2.row][node_2.col].f - grid[node_1.row][node_1.col].f\r\n            })\r\n            const f = calculateManhattanDistance(startNode, endNode)\r\n            setEstimateValues(startNode.row, startNode.col, f, null, null)\r\n            priorityQueue.enqueue(startNode)\r\n        }\r\n\r\n        if (priorityQueue.isEmpty()) {  // No path was found\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        // Perform one iteration of Greedy\r\n        const currNode = priorityQueue.dequeue()\r\n        toggleVisitedNode(currNode.row, currNode.col)\r\n        toggleFrontierNode(currNode.row, currNode.col)  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            await tracePath(endNode, grid, togglePathNode)\r\n            completeAlgorithm()\r\n            return\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                const f = calculateManhattanDistance(neighbor, endNode)\r\n                setEstimateValues(neighbor.row, neighbor.col, f, null, null)\r\n                toggleFrontierNode(neighbor.row, neighbor.col)\r\n                setParentNode(neighbor.row, neighbor.col, { ...currNode })\r\n                priorityQueue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n        // Timeout ensures that the animation has enough time to render fully\r\n        await sleep(20)\r\n\r\n    }\r\n\r\n    return priorityQueue\r\n\r\n}\r\n\r\n// Run the algorithm on the grid and return the grid state\r\n// corresponding to the completed algorithm \r\n// (rerun does not have the tracing animation; no timeout between each node visit => instantaneous render of traversed graph)\r\nexport const rerunGreedy = (grid, startNode, endNode) => {\r\n    const priorityQueue = buckets.PriorityQueue((node_1, node_2) => {\r\n        return grid[node_2.row][node_2.col].f - grid[node_1.row][node_1.col].f\r\n    })\r\n    const f = calculateManhattanDistance(startNode, endNode)\r\n    grid[startNode.row][startNode.col].f = f\r\n    priorityQueue.enqueue(startNode)\r\n    while (!priorityQueue.isEmpty()) {\r\n        const currNode = priorityQueue.dequeue()\r\n        grid[currNode.row][currNode.col].isVisitedNode = true\r\n        grid[currNode.row][currNode.col].isFrontierNode = false  // this node is no longer a frontier node\r\n\r\n        if (nodeEquals(endNode, currNode)) {\r\n            setPath(endNode, grid)\r\n            break\r\n        }\r\n\r\n        const neighbors = getNeighbors(currNode)\r\n        for (const neighbor of neighbors) {\r\n            if (shouldAddNode(neighbor, grid)) {\r\n                const f = calculateManhattanDistance(neighbor, endNode)\r\n                grid[neighbor.row][neighbor.col].f = f\r\n                grid[neighbor.row][neighbor.col].isFrontierNode = true\r\n                grid[neighbor.row][neighbor.col].parent = { ...currNode }\r\n                priorityQueue.enqueue(neighbor)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return grid\r\n}","import { rerunAStar } from \"./Algorithms/AStar\"\r\nimport { rerunBFS } from \"./Algorithms/BFS\"\r\nimport { rerunDFS } from \"./Algorithms/DFS\"\r\nimport { rerunGreedy } from \"./Algorithms/Greedy\"\r\n\r\n// Node constructor\r\nexport function Node() {\r\n    this.isStartNode = false\r\n    this.isEndNode = false\r\n    this.isWallNode = false\r\n    this.isFrontierNode = false\r\n    this.isVisitedNode = false\r\n    this.isPathNode = false\r\n    this.parent = null  // coordinates of the parent\r\n    this.g = null  // to be used by Astar and Greedy algorithms\r\n    this.h = null\r\n    this.f = null\r\n}\r\n\r\nexport const initializeStartNode = () => {\r\n    const node = new Node()\r\n    node.isStartNode = true\r\n    return node\r\n}\r\n\r\nexport const initializeEndNode = () => {\r\n    const node = new Node()\r\n    node.isEndNode = true\r\n    return node\r\n}\r\n\r\nfunction Statistic(numTotal) {\r\n    this.numTotal = numTotal\r\n    this.numVisited = 0\r\n    this.numFrontier = 0\r\n    this.numWall = 0\r\n    this.numPath = 0\r\n}\r\n\r\n// Key generators for React Grid mapping to rows and cells\r\nexport const generateRowKey = (row) => {\r\n    return row.toString()\r\n}\r\n\r\nexport const generateCellKey = (row, col) => {\r\n    return row.toString() + '#' + col.toString()\r\n}\r\n\r\n// Utilities for generating grids\r\nexport const generateEmptyGrid = (numRows, numCols, startNode, endNode) => {\r\n    const grid = new Array(0)\r\n    for (let i = 0; i < numRows; i++) {\r\n        grid.push(new Array(0))\r\n        for (let j = 0; j < numCols; j++) {\r\n            grid[i].push(new Node())\r\n        }\r\n    }\r\n    grid[startNode.row][startNode.col].isStartNode = true\r\n    grid[endNode.row][endNode.col].isEndNode = true\r\n    return grid\r\n}\r\n\r\nconst calculateStatistics = (grid) => {\r\n    const numRows = grid.length\r\n    const numCols = grid[0].length\r\n    const statistics = new Statistic(numRows * numCols)\r\n    for (let i = 0; i < numRows; i++) {\r\n        for (let j = 0; j < numCols; j++) {\r\n            statistics.numWall += grid[i][j].isWallNode ? 1 : 0\r\n            statistics.numVisited += grid[i][j].isVisitedNode ? 1 : 0\r\n            statistics.numFrontier += grid[i][j].isFrontierNode ? 1 : 0\r\n            statistics.numPath += grid[i][j].isPathNode ? 1 : 0\r\n        }\r\n    }\r\n    return statistics\r\n}\r\n\r\nexport const generateRerunAlgorithmGrid = (grid, startNode, endNode, algorithmSelected) => {\r\n    grid = grid.slice()\r\n    switch (algorithmSelected) {\r\n        case 'BFS':\r\n            grid = rerunBFS(grid, startNode, endNode)\r\n            break\r\n        case 'DFS':\r\n            grid = rerunDFS(grid, startNode, endNode)\r\n            break\r\n        case 'ASTAR':\r\n            grid = rerunAStar(grid, startNode, endNode)\r\n            break\r\n        case 'GREEDY':\r\n            grid = rerunGreedy(grid, startNode, endNode)\r\n            break\r\n        default:\r\n            break\r\n    }\r\n    return { \r\n        grid, \r\n        statistics: calculateStatistics(grid) \r\n    }\r\n}\r\n\r\nexport const setVisitedNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isVisitedNode = !node.isVisitedNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numVisited: node.isVisitedNode ? statistics.numVisited + 1 : statistics.numVisited - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setWallNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isWallNode = !node.isWallNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numWall: node.isWallNode ? statistics.numWall + 1 : statistics.numWall - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setFrontierNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isFrontierNode = !node.isFrontierNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numFrontier: node.isFrontierNode ? statistics.numFrontier + 1 : statistics.numFrontier - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPathNode = (grid, statistics, {row, col}) => {\r\n    grid = grid.slice()\r\n    const node = grid[row][col]\r\n    node.isPathNode = !node.isPathNode;\r\n    return {\r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numPath: node.isPathNode ? statistics.numPath + 1 : statistics.numPath - 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const setStartNode = (grid, {row, col}) => {\r\n    grid = grid.slice()\r\n    grid[row][col] = initializeStartNode()\r\n    return grid\r\n}\r\n\r\nexport const setEndNode = (grid, {row, col}) => {\r\n    grid = grid.slice()\r\n    grid[row][col] = initializeEndNode()\r\n    return grid\r\n}\r\n\r\nexport const setParentNode = (grid, {row, col, parent}) => {\r\n    grid = grid.slice()\r\n    grid[row][col].parent = parent;\r\n    return grid\r\n}\r\n\r\nexport const setEstimateValues = (grid, {f, g, h, row, col}) => {\r\n    grid = grid.slice()\r\n    grid[row][col].f = f;\r\n    grid[row][col].g = g;\r\n    grid[row][col].h = h;\r\n    return grid\r\n}\r\n\r\nexport const applyMaskedNode = (grid, statistics, {row, col}, maskedNode) => {\r\n    grid = grid.slice()\r\n    \r\n    grid[row][col] = { ...maskedNode };\r\n    return { \r\n        grid,\r\n        statistics: {\r\n            ...statistics,\r\n            numWall: statistics.numWall + (maskedNode.isWallNode ? 1 : 0),\r\n        }\r\n    }\r\n}\r\n\r\nexport const calculateMaskedStatistic = (grid, statistics, {row, col}) => {\r\n    const newMaskedNode = grid[row][col]\r\n    return {\r\n        statistics: {\r\n            ...statistics,\r\n            numWall: statistics.numWall - (newMaskedNode.isWallNode ? 1 : 0),\r\n        }\r\n    }\r\n}\r\n\r\nexport const generateWalls = (grid, statistics) => {\r\n    grid = grid.slice()\r\n    const p = 0.3  // probability that a node becomes a wall node \r\n    let numWall = 0\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            const node = grid[i][j]\r\n            if (!node.isStartNode && !node.isEndNode && Math.random() <= p) {\r\n                node.isWallNode = true\r\n                numWall++\r\n            } else {\r\n                node.isWallNode = false\r\n            }\r\n        }\r\n    }\r\n    return { \r\n        grid, \r\n        statistics: {\r\n            ...statistics,\r\n            numWall\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearBoard = (grid, startNode, endNode) => {\r\n    grid = grid.slice()\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            grid[i][j] = new Node()\r\n        }\r\n    }\r\n    grid[startNode.row][startNode.col].isStartNode = true\r\n    grid[endNode.row][endNode.col].isEndNode = true\r\n    return { \r\n        grid, \r\n        statistics: initializeStatistics(grid.length, grid[0].length)\r\n    }\r\n}\r\n\r\nexport const clearPath = (grid, statistics) => {\r\n    grid = grid.slice()\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            const node = grid[i][j]\r\n            node.isPathNode = false\r\n            node.isVisitedNode = false\r\n            node.isFrontierNode = false\r\n            node.parent = null\r\n            node.g = null\r\n            node.f = null\r\n            node.h = null\r\n        }\r\n    }\r\n    return { \r\n        grid, \r\n        statistics: {\r\n            ...statistics,\r\n            numPath: 0,\r\n            numFrontier: 0,\r\n            numVisited: 0\r\n        }\r\n    }\r\n}\r\n\r\n// Utilities for generating statistics\r\nexport const initializeStatistics = (numRows, numCols) => {\r\n    return new Statistic(numRows * numCols)\r\n}","// create and export types for our actions\r\nexport const SET_BFS_ALGORITHM = \"SET_BFS_ALGORITHM\"\r\nexport const SET_DFS_ALGORITHM = \"SET_DFS_ALGORITHM\"\r\nexport const SET_ASTAR_ALGORITHM = \"SET_ASTAR_ALGORITHM\"\r\nexport const SET_GREEDY_ALGORITHM = \"SET_GREEDY_ALGORITHM\"\r\nexport const TOGGLE_VISITED_NODE = \"TOGGLE_VISITED_NODE\"\r\nexport const TOGGLE_FRONTIER_NODE = \"TOGGLE_FRONTIER_NODE\"\r\nexport const TOGGLE_WALL_NODE = \"TOGGLE_WALL_NODE\"\r\nexport const TOGGLE_PATH_NODE = \"TOGGLE_PATH_NODE\"\r\nexport const SET_ALGORITHM_STATE = \"SET_ALGORITHM_STATE\"\r\nexport const CLEAR_ALGORITHM_STATE = \"CLEAR_ALGORITHM_STATE\"\r\nexport const SET_START_NODE = \"SET_START_NODE\"\r\nexport const SET_END_NODE = \"SET_END_NODE\"\r\nexport const RUN_ALGORITHM = \"RUN_ALGORITHM\"\r\nexport const READY_ALGORITHM = \"READY_ALGORITHM\"\r\nexport const PAUSE_ALGORITHM = \"PAUSE_ALGORITHM\"\r\nexport const COMPLETE_ALGORITHM = \"COMPLETE_ALGORITHM\" \r\nexport const SET_PARENT_NODE = \"SET_PARENT_NODE\"\r\nexport const GENERATE_WALLS = \"GENERATE_WALLS\"\r\nexport const CLEAR_BOARD = \"CLEAR_BOARD\"\r\nexport const CLEAR_PATH = \"CLEAR_PATH\"\r\nexport const SET_DRAGGED_NODE = \"SET_DRAGGED_NODE\"\r\nexport const CLEAR_DRAGGED_NODE = \"CLEAR_DRAGGED_NODE\"\r\nexport const SET_START_MASKED_NODE = \"SET_START_MASKED_NODE\"\r\nexport const APPLY_START_MASKED_NODE = \"APPLY_START_MASKED_NODE\"\r\nexport const RERUN_ALGORITHM = \"RERUN_ALGORITHM\"\r\nexport const RESET_START_MASKED_NODE = \"RESET_START_MASKED_NODE\"\r\nexport const SET_END_MASKED_NODE = \"SET_END_MASKED_NODE\"\r\nexport const APPLY_END_MASKED_NODE = \"APPLY_END_MASKED_NODE\"\r\nexport const RESET_END_MASKED_NODE = \"RESET_END_MASKED_NODE\"\r\nexport const SET_ESTIMATE_VALUES = \"SET_ESTIMATE_VALUES\"\r\n\r\n\r\n// action creators for grid state\r\nexport const rerunAlgorithm = (algorithmSelected) => {\r\n    return {\r\n        type: RERUN_ALGORITHM,\r\n        payload: { algorithmSelected }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_VISITED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_FRONTIER_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_WALL_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: TOGGLE_PATH_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setParentNode = (row, col, parent) => {\r\n    return {\r\n        type: SET_PARENT_NODE,\r\n        payload: {row, col, parent}\r\n    }\r\n}\r\n\r\nexport const generateWalls = () => {\r\n    return {\r\n        type: GENERATE_WALLS\r\n    }\r\n}\r\n\r\nexport const clearBoard = () => {\r\n    return {\r\n        type: CLEAR_BOARD\r\n    }\r\n}\r\n\r\nexport const clearPath = () => {\r\n    return {\r\n        type: CLEAR_PATH\r\n    }\r\n}\r\n\r\nexport const setEstimateValues = (row, col, f, g, h) => {\r\n    return {\r\n        type: SET_ESTIMATE_VALUES,\r\n        payload: {f, g, h, row, col}\r\n    }\r\n}\r\n\r\n// action creators for algorithm state\r\n\r\nexport const runAlgorithm = () => {\r\n    return {\r\n        type: RUN_ALGORITHM,\r\n    }\r\n};\r\n\r\nexport const readyAlgorithm = () => {\r\n    return {\r\n        type: READY_ALGORITHM,\r\n    }\r\n};\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return {\r\n        type: PAUSE_ALGORITHM,\r\n    }\r\n};\r\n\r\nexport const completeAlgorithm = () => {\r\n    return {\r\n        type: COMPLETE_ALGORITHM,\r\n    }\r\n};\r\n\r\n\r\nexport const setBFSAlgorithm = () => {\r\n    return {\r\n        type: SET_BFS_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setDFSAlgorithm = () => {\r\n    return {\r\n        type: SET_DFS_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setAStarAlgorithm = () => {\r\n    return {\r\n        type: SET_ASTAR_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setGreedyAlgorithm = () => {\r\n    return {\r\n        type: SET_GREEDY_ALGORITHM\r\n    }\r\n}\r\n\r\nexport const setAlgorithmState = (algorithmState) => {\r\n    return {\r\n        type: SET_ALGORITHM_STATE,\r\n        payload: algorithmState\r\n    }\r\n}\r\n\r\nexport const clearAlgorithmState = () => {\r\n    return {\r\n        type: CLEAR_ALGORITHM_STATE\r\n    }\r\n}\r\n\r\n// action creators for tracking nodes\r\nexport const setStartNode = (row, col) => {\r\n    return {\r\n        type: SET_START_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setEndNode = (row, col) => {\r\n    return {\r\n        type: SET_END_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setDraggedNode = (row, col) => {\r\n    return {\r\n        type: SET_DRAGGED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const clearDraggedNode = (row, col) => {\r\n    return {\r\n        type: CLEAR_DRAGGED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setStartMaskedNode = (row, col) => {\r\n    return {\r\n        type: SET_START_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\n\r\nexport const applyStartMaskedNode = (row, col) => {\r\n    return {\r\n        type: APPLY_START_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const setEndMaskedNode = (row, col) => {\r\n    return {\r\n        type: SET_END_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\n\r\nexport const applyEndMaskedNode = (row, col) => {\r\n    return {\r\n        type: APPLY_END_MASKED_NODE,\r\n        payload: {row, col}\r\n    }\r\n}\r\n\r\nexport const resetStartMaskedNode = () => {\r\n    return {\r\n        type: RESET_START_MASKED_NODE\r\n    }\r\n}\r\n\r\nexport const resetEndMaskedNode = () => {\r\n    return {\r\n        type: RESET_END_MASKED_NODE\r\n    }\r\n}","import React from 'react'\r\nimport '../css/Node.css'\r\nimport { connect } from 'react-redux'\r\nimport { toggleWallNode, setDraggedNode, clearDraggedNode, setStartNode, setEndNode, setStartMaskedNode, setEndMaskedNode, \r\n    setParentNode, rerunAlgorithm, clearPath, applyStartMaskedNode, applyEndMaskedNode, resetEndMaskedNode, resetStartMaskedNode } from '../actions'\r\nimport { nodeEquals, isAlgorithmCompleted, isAlgorithmUnselected, isAlgorithmReady } from '../utils/AlgorithmUtil'\r\n\r\nfunction Node({isVisitedNode, isWallNode, isEndNode, isStartNode, isFrontierNode, isPathNode,\r\n    toggleWallNode, row, col, startNode, endNode, draggedNode, setDraggedNode, clearDraggedNode,\r\n    setStartNode, setEndNode, setStartMaskedNode, applyStartMaskedNode, algorithmSelected, rerunAlgorithm,\r\n    clearPath, setEndMaskedNode, applyEndMaskedNode }) {\r\n\r\n    const handleMouseOver = () => {\r\n        if (draggedNode) {  // if there was a node being dragged to this position\r\n            if (draggedNode.isWallNode && !isVisitedNode && !isFrontierNode && !isWallNode && !isStartNode && !isEndNode) {\r\n                toggleWallNode(row, col)  // only allow toggling of wall boolean for unvisited/grey nodes and wall nodes\r\n            } else if (draggedNode.isStartNode && !isEndNode) {  // do not allow dragging start node over end node\r\n                applyStartMaskedNode(draggedNode.row, draggedNode.col)  // restore masked node properties back to the node we came from\r\n                if (isAlgorithmCompleted()) \r\n                    clearPath()\r\n                setStartMaskedNode(row, col)  // save the state of this node, to be reapplied to this node if we drag to somewhere else\r\n                setStartNode(row, col)  // replace the state of this node\r\n                setDraggedNode(row, col)  // update the dragged node to be this node\r\n\r\n                if (isAlgorithmCompleted()) {  // if the algorithm has status completed, run the algorithm instantly\r\n                    rerunAlgorithm(algorithmSelected)  // draw the new path, visited and frontier nodes for this new start position\r\n                }\r\n            } else if (draggedNode.isEndNode && !isStartNode) {  // do not allow dragging end node over start node\r\n                applyEndMaskedNode(draggedNode.row, draggedNode.col)  // restore masked node properties back to the node we came from\r\n                if (isAlgorithmCompleted()) \r\n                    clearPath()\r\n                setEndMaskedNode(row, col)  // save the state of this node, to be reapplied to this node if we drag to somewhere else\r\n                setEndNode(row, col)  // replace the state of this node\r\n                setDraggedNode(row, col)  // update the dragged node to be this node\r\n\r\n                if (isAlgorithmCompleted()) {  // if the algorithm has status completed, run the algorithm instantly\r\n                    rerunAlgorithm(algorithmSelected)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleMouseDown = () => {\r\n        if (isAlgorithmReady() || isAlgorithmCompleted() || isAlgorithmUnselected()) {  // only allow interactions with the grid when not running\r\n            if (!nodeEquals({row, col}, startNode) && !nodeEquals({row, col}, endNode) && !isVisitedNode && !isFrontierNode && !isPathNode)\r\n                toggleWallNode(row, col)\r\n            setDraggedNode(row, col)  // this is the current node being dragged\r\n        }\r\n    }\r\n\r\n    const handleMouseUp = () => {\r\n        clearDraggedNode()\r\n    }\r\n\r\n    let nodeClass\r\n    if (isStartNode) {\r\n        nodeClass = 'start'\r\n    } else if (isEndNode) {\r\n        nodeClass = 'end'\r\n    } else if (isWallNode) {\r\n        nodeClass = 'wall'\r\n    } else if (isPathNode) {\r\n        nodeClass = 'path'\r\n    } else if (isVisitedNode) {\r\n        nodeClass = 'visited'\r\n    } else if (isFrontierNode) {\r\n        nodeClass = 'frontier'\r\n    } else {\r\n        nodeClass = 'unvisited'\r\n    }\r\n\r\n    return (\r\n        <div className={`node ${nodeClass} unselectable`} onMouseOver={handleMouseOver}\r\n            onMouseUp={handleMouseUp} onMouseDown={handleMouseDown} >\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isVisitedNode: state.board.grid[ownProps.row][ownProps.col].isVisitedNode,\r\n        isWallNode: state.board.grid[ownProps.row][ownProps.col].isWallNode,\r\n        isStartNode: state.board.grid[ownProps.row][ownProps.col].isStartNode,\r\n        isEndNode: state.board.grid[ownProps.row][ownProps.col].isEndNode,\r\n        isPathNode: state.board.grid[ownProps.row][ownProps.col].isPathNode,\r\n        isFrontierNode: state.board.grid[ownProps.row][ownProps.col].isFrontierNode,\r\n        startNode: state.board.startNode,\r\n        endNode: state.board.endNode,\r\n        draggedNode: state.board.draggedNode,\r\n        algorithmSelected: state.algorithmSelected,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleWallNode: (row, col) => dispatch(toggleWallNode(row, col)),\r\n        setParentNode: (row, col) => dispatch(setParentNode(row, col)),\r\n        setDraggedNode: (row, col) => dispatch(setDraggedNode(row, col)),\r\n        clearDraggedNode: () => dispatch(clearDraggedNode()),\r\n        setStartNode: (row, col) => dispatch(setStartNode(row, col)),\r\n        setEndNode: (row, col) => dispatch(setEndNode(row, col)),\r\n        setStartMaskedNode: (row, col) => dispatch(setStartMaskedNode(row, col)),\r\n        setEndMaskedNode: (row, col) => dispatch(setEndMaskedNode(row, col)),\r\n        applyStartMaskedNode: (row, col) => dispatch(applyStartMaskedNode(row, col)),\r\n        applyEndMaskedNode: (row, col) => dispatch(applyEndMaskedNode(row, col)),\r\n        resetStartMaskedNode: (row, col) => dispatch(resetStartMaskedNode(row, col)),\r\n        resetEndMaskedNode: (row, col) => dispatch(resetEndMaskedNode(row, col)),\r\n        rerunAlgorithm: (algorithmSelected) => dispatch(rerunAlgorithm(algorithmSelected)),\r\n        clearPath: () => dispatch(clearPath()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { generateRowKey, generateCellKey } from '../utils/GridUtil'\r\nimport Node from './Node'\r\nimport '../css/Grid.css'\r\n\r\nfunction Grid(props) {\r\n    return (\r\n        <div className='grid'>\r\n            {props.grid.map((cellRow, row) => \r\n                <div className='grid-row' key={generateRowKey(row)}>\r\n                    {cellRow.map((cell, col) => \r\n                        <Node row={row} col={col} key={generateCellKey(row, col)} />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        grid: state.board.grid\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid)\r\n","import React from 'react'\r\nimport '../css/Navbar.css'\r\n\r\n\r\nfunction Navbar({ algorithmStatus, algorithmSelected, runAlgorithm, generateWalls, clearBoard, clearPath,\r\n    readyAlgorithm, clearAlgorithmState, resetStartMaskedNode, resetEndMaskedNode, toggleShowCarousel }) {\r\n\r\n    const handleClickRun = () => {\r\n        runAlgorithm()\r\n    }\r\n\r\n    const handleClickGenerateWalls = () => {\r\n        generateWalls()\r\n    }\r\n\r\n    const handleClickClearPath = () => {\r\n        clearPath()\r\n        // discard the state saved by any algorithm pauses\r\n        clearAlgorithmState()\r\n        readyAlgorithm()\r\n    }\r\n\r\n    const handleClickClearBoard = () => {\r\n        clearBoard()\r\n        clearAlgorithmState()\r\n        readyAlgorithm()\r\n        resetStartMaskedNode()\r\n        resetEndMaskedNode()\r\n    }\r\n\r\n    let runButtonText;\r\n    let runButtonClass;\r\n    let runButtonDisabled = false\r\n    let generateWallsButtonDisabled = false\r\n    if (algorithmStatus === 'UNSELECTED') {\r\n        runButtonText = 'Select an Algorithm'\r\n        runButtonClass = 'unselected'\r\n        runButtonDisabled = true\r\n    } else if (algorithmStatus === 'READY') {\r\n        runButtonText = 'Run'\r\n        runButtonClass = 'run'\r\n    } else if (algorithmStatus === 'PAUSED') {\r\n        runButtonText = 'Resume'\r\n        runButtonClass = 'resume'\r\n        generateWallsButtonDisabled = true\r\n    } else if (algorithmStatus === 'RUNNING') {\r\n        runButtonText = 'Pause'\r\n        runButtonClass = 'pause'\r\n        generateWallsButtonDisabled = true\r\n    } else {  // if 'COMPLETED'\r\n        runButtonText = 'Completed'\r\n        runButtonClass = 'completed'\r\n        runButtonDisabled = true\r\n        generateWallsButtonDisabled = true\r\n    }\r\n\r\n    return (\r\n        <nav className='navbar'>\r\n            <div className='navbar-list-container'>\r\n                <ul className='navbar-list'>\r\n                    <li className='navbar-item'>\r\n                        <button className={`navbar-button ${generateWallsButtonDisabled ? 'navbar-disabled-button' : 'navbar-normal-button'}`} \r\n                            onClick={handleClickGenerateWalls} disabled={generateWallsButtonDisabled}>Generate Walls</button>\r\n                    </li>\r\n                    <li className='navbar-item'>\r\n                        <button  className={`navbar-button ${generateWallsButtonDisabled ? 'navbar-disabled-button' : 'navbar-normal-button'}`}\r\n                            disabled={generateWallsButtonDisabled} onClick={toggleShowCarousel}>Select Algorithm</button>\r\n                    </li>\r\n                    <li className='navbar-item'>\r\n                        <button className={`navbar-button navbar-run-button ${runButtonClass}`} disabled={runButtonDisabled} onClick={handleClickRun}>\r\n                            {runButtonText}\r\n                        </button>\r\n                    </li>  \r\n                    <li className='navbar-item'>\r\n                        <button  className='navbar-button navbar-normal-button' onClick={handleClickClearPath}>Clear Path</button>\r\n                    </li>\r\n                    <li className='navbar-item'>\r\n                        <button  className='navbar-button navbar-normal-button' onClick={handleClickClearBoard}>Clear Board</button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../css/Statbar.css'\r\n\r\nfunction Statbar({ statistics }) {\r\n    return (\r\n        <div className='statbar'>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node start'></div>\r\n                    <span className='stat-description'>Start</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node end'></div>\r\n                    <span className='stat-description'>End</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node unvisited'></div>\r\n                    <span className='stat-description'>Unvisited</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numTotal - statistics.numVisited - statistics.numWall - statistics.numFrontier}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node visited'></div>\r\n                    <span className='stat-description'>Visited</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numVisited}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node frontier'></div>\r\n                    <span className='stat-description'>Frontier</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numFrontier}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node wall'></div>\r\n                    <span className='stat-description'>Wall</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numWall}</span>\r\n                </div>\r\n            </div>\r\n            <div className='stat-container'>\r\n                <div className='stat-node-container'>\r\n                    <div className='stat-node path'></div>\r\n                    <span className='stat-description'>Path</span>\r\n                </div>\r\n                <div>\r\n                    <span className='stat-value'>{statistics.numPath}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        statistics: state.board.statistics,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Statbar)\r\n","import React, { useState } from 'react'\r\nimport '../css/Carousel.css'\r\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from \"react-icons/fa\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\nimport { isAlgorithmUnselected } from '../utils/AlgorithmUtil';\r\n\r\nfunction Carousel({ toggleShowCarousel, setBFSAlgorithm, readyAlgorithm, setDFSAlgorithm, setAStarAlgorithm, setGreedyAlgorithm }) {\r\n    const algorithms = [{name: 'BFS', header: 'BFS Algorithm', dispatch: setBFSAlgorithm}, {name: 'DFS', header: 'DFS Algorithm', dispatch: setDFSAlgorithm},\r\n        {name: 'AStar', header: 'A Star Algorithm', dispatch: setAStarAlgorithm}, {name: 'Greedy', header: 'Greedy Algorithm', dispatch: setGreedyAlgorithm}]\r\n    const [ slideNum, setSlideNum ] = useState(0)\r\n\r\n    // Custom modulo function. The default Javascript modulo operator that gives -3 % 4 = -3. Instead, we want it to be 1\r\n    const mod = (m, n) => {\r\n        return ((m % n) + n) % n\r\n    }\r\n\r\n    const handleClickSelect = (slideNum) => {\r\n        algorithms[slideNum].dispatch()\r\n        toggleShowCarousel()\r\n        if (isAlgorithmUnselected())\r\n            readyAlgorithm()\r\n    }\r\n\r\n    const handleClickLeft = () => {\r\n        setSlideNum(mod(slideNum - 1, algorithms.length))\r\n    }\r\n\r\n    const handleClickRight = () => {\r\n        setSlideNum(mod(slideNum + 1, algorithms.length))\r\n    }\r\n\r\n    return (\r\n        <div className='carousel-container'>\r\n            <div className='carousel'>\r\n                <h1>{ algorithms[slideNum].header }</h1>\r\n                <AiFillCloseCircle className='window-close-icon' onClick={toggleShowCarousel} />\r\n                <div>\r\n                    <FaArrowAltCircleLeft className='arrow-circle-icon' onClick={handleClickLeft} />\r\n                    {/* <img src={props.algoGIF} alt={props.algoName} /> */}\r\n                    <FaArrowAltCircleRight className='arrow-circle-icon' onClick={handleClickRight} />\r\n                </div>\r\n                <p className='algorithm-description'>\r\n                    This is a description of the algorithm.\r\n                </p>\r\n                <button className='carousel-select-button' onClick={() => handleClickSelect(slideNum)}>Select</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Carousel\r\n","import React, { useState } from 'react'\r\nimport Grid from './Grid'\r\nimport Navbar from './Navbar'\r\nimport Statbar from './Statbar'\r\nimport Carousel from './Carousel'\r\nimport '../css/Menu.css'\r\nimport { setBFSAlgorithm, toggleVisitedNode, toggleFrontierNode,\r\n    setAlgorithmState, readyAlgorithm, runAlgorithm, pauseAlgorithm, completeAlgorithm,\r\n    togglePathNode, setParentNode, generateWalls, clearBoard, clearPath, clearAlgorithmState, \r\n    resetStartMaskedNode, resetEndMaskedNode, setDFSAlgorithm, setAStarAlgorithm, setGreedyAlgorithm,\r\n    setEstimateValues } from '../actions'\r\nimport { connect } from 'react-redux'\r\nimport { runBFS } from '../utils/Algorithms/BFS'\r\nimport { runDFS } from '../utils/Algorithms/DFS'\r\nimport { runAStar } from '../utils/Algorithms/AStar'\r\nimport { isAlgorithmRunning, isAlgorithmCompleted, isAlgorithmReady } from '../utils/AlgorithmUtil'\r\nimport { runGreedy } from '../utils/Algorithms/Greedy'\r\n\r\nfunction Menu(props) {\r\n\r\n    const [ showCarousel, setShowCarousel ] = useState(false)\r\n\r\n    const runAlgorithm = async () => {\r\n\r\n        if (isAlgorithmRunning()) {\r\n            props.pauseAlgorithm()\r\n            return\r\n        }\r\n        \r\n        props.runAlgorithm()  // Change algorithm status to running\r\n        \r\n        let state;\r\n        switch (props.algorithmSelected) {\r\n            case 'BFS':\r\n                state = await runBFS(props.algorithmState, props.grid, props.startNode, props.endNode, props.toggleVisitedNode, \r\n                    props.toggleFrontierNode, props.togglePathNode, props.completeAlgorithm, props.setParentNode)\r\n                break\r\n            case 'DFS':\r\n                state = await runDFS(props.algorithmState, props.grid, props.startNode, props.endNode, props.toggleVisitedNode, \r\n                    props.toggleFrontierNode, props.togglePathNode, props.completeAlgorithm, props.setParentNode)\r\n                break\r\n            case 'ASTAR':\r\n                state = await runAStar(props.algorithmState, props.grid, props.startNode, props.endNode, props.toggleVisitedNode, \r\n                    props.toggleFrontierNode, props.togglePathNode, props.completeAlgorithm, props.setParentNode, props.setEstimateValues)\r\n                break\r\n            case 'GREEDY':\r\n                state = await runGreedy(props.algorithmState, props.grid, props.startNode, props.endNode, props.toggleVisitedNode, \r\n                    props.toggleFrontierNode, props.togglePathNode, props.completeAlgorithm, props.setParentNode, props.setEstimateValues)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n        // We have to clear the algorithm state if it is completed or sent back to the ready state from the running state\r\n        // this happens when we click clearBoard or clearPath buttons while the algorithm is still running\r\n        if (isAlgorithmCompleted() || isAlgorithmReady()) {\r\n            props.clearAlgorithmState()\r\n        } else {\r\n            props.setAlgorithmState(state)\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar runAlgorithm={runAlgorithm} \r\n                algorithmStatus={props.algorithmStatus}\r\n                algorithmSelected={props.algorithmSelected}\r\n                generateWalls={props.generateWalls}\r\n                clearBoard={props.clearBoard}\r\n                clearPath={props.clearPath}\r\n                readyAlgorithm={props.readyAlgorithm}\r\n                clearAlgorithmState={props.clearAlgorithmState}\r\n                resetStartMaskedNode={props.resetStartMaskedNode}\r\n                resetEndMaskedNode={props.resetEndMaskedNode}\r\n                toggleShowCarousel={() => setShowCarousel(!showCarousel)} />\r\n            <div className='grid-container'>\r\n                <Grid />\r\n            </div>\r\n            <div className='statbar-container'>\r\n                <Statbar />\r\n            </div>\r\n            {showCarousel && <Carousel toggleShowCarousel={() => setShowCarousel(!showCarousel)} \r\n                setBFSAlgorithm={props.setBFSAlgorithm} readyAlgorithm={props.readyAlgorithm} setDFSAlgorithm={props.setDFSAlgorithm}\r\n                setAStarAlgorithm={props.setAStarAlgorithm} setGreedyAlgorithm={props.setGreedyAlgorithm} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setBFSAlgorithm: () => dispatch(setBFSAlgorithm()),\r\n        setDFSAlgorithm: () => dispatch(setDFSAlgorithm()),\r\n        setAStarAlgorithm: () => dispatch(setAStarAlgorithm()),\r\n        setGreedyAlgorithm: () => dispatch(setGreedyAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        setAlgorithmState: (state) => dispatch(setAlgorithmState(state)),\r\n        clearAlgorithmState: () => dispatch(clearAlgorithmState()),\r\n        readyAlgorithm: () => dispatch(readyAlgorithm()),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        completeAlgorithm: () => dispatch(completeAlgorithm()),\r\n        setParentNode: (row, col, parent) => dispatch(setParentNode(row, col, parent)),\r\n        generateWalls: () => dispatch(generateWalls()),\r\n        clearBoard: () => dispatch(clearBoard()),\r\n        clearPath: () => dispatch(clearPath()),\r\n        resetStartMaskedNode: () => dispatch(resetStartMaskedNode()),\r\n        resetEndMaskedNode: () => dispatch(resetEndMaskedNode()),\r\n        setEstimateValues: (row, col, f, g, h) => dispatch(setEstimateValues(row, col, f, g, h)),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        grid: state.board.grid,\r\n        algorithmSelected: state.algorithmSelected,\r\n        startNode: state.board.startNode,\r\n        endNode: state.board.endNode,\r\n        algorithmState: state.algorithmState,\r\n        algorithmStatus: state.algorithmStatus,\r\n        statistics: state.board.statistics,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu)\r\n","import '../css/App.css';\nimport Menu from './Menu';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\"\r\nimport { generateEmptyGrid, setEndNode, setFrontierNode, setPathNode, setStartNode, setVisitedNode, setWallNode,\r\n    setParentNode, generateWalls, clearBoard, clearPath, initializeStatistics, Node, applyMaskedNode, generateRerunAlgorithmGrid, \r\n    calculateMaskedStatistic, setEstimateValues } from \"../utils/GridUtil\"\r\nimport { SET_BFS_ALGORITHM, SET_ASTAR_ALGORITHM, SET_DFS_ALGORITHM, SET_GREEDY_ALGORITHM,\r\n    TOGGLE_FRONTIER_NODE, TOGGLE_PATH_NODE, TOGGLE_VISITED_NODE, TOGGLE_WALL_NODE,\r\n    SET_ALGORITHM_STATE, CLEAR_ALGORITHM_STATE, SET_START_NODE, SET_END_NODE, READY_ALGORITHM, COMPLETE_ALGORITHM,\r\n    PAUSE_ALGORITHM, RUN_ALGORITHM, SET_PARENT_NODE, GENERATE_WALLS, CLEAR_BOARD, CLEAR_PATH, SET_DRAGGED_NODE, \r\n    CLEAR_DRAGGED_NODE, SET_START_MASKED_NODE, APPLY_START_MASKED_NODE, RERUN_ALGORITHM, RESET_START_MASKED_NODE,\r\n    SET_END_MASKED_NODE, APPLY_END_MASKED_NODE, RESET_END_MASKED_NODE, SET_ESTIMATE_VALUES } from '../actions'\r\n\r\nconst numRows = 20  // Grid Dimensions\r\nconst numCols = 50\r\nconst start = {row: 9, col: 15 }  // Start Node\r\nconst end = { row: 9, col: 35 }  // End Node\r\n\r\nfunction board(state = { grid: generateEmptyGrid(numRows, numCols, start, end), statistics: initializeStatistics(numRows, numCols), \r\n        draggedNode: null, startMaskedNode: new Node(), endMaskedNode: new Node(), startNode: start, endNode: end }, action) {\r\n    switch(action.type) {\r\n        case TOGGLE_VISITED_NODE: {\r\n            const { grid, statistics } = setVisitedNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case TOGGLE_WALL_NODE: {\r\n            const { grid, statistics } = setWallNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case TOGGLE_FRONTIER_NODE: {\r\n            const { grid, statistics } = setFrontierNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case TOGGLE_PATH_NODE: {\r\n            const { grid, statistics } = setPathNode(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case SET_START_NODE:\r\n            return {\r\n                ...state,\r\n                grid: setStartNode(state.grid, action.payload),\r\n                startNode: { row: action.payload.row, col: action.payload.col }\r\n            }\r\n        case SET_END_NODE:\r\n            return {\r\n                ...state,\r\n                grid: setEndNode(state.grid, action.payload),\r\n                endNode: { row: action.payload.row, col: action.payload.col }\r\n            }\r\n        case SET_PARENT_NODE:\r\n            return {\r\n                ...state,\r\n                grid: setParentNode(state.grid, action.payload)\r\n            }\r\n        case GENERATE_WALLS: {\r\n            const { grid, statistics } = generateWalls(state.grid, state.statistics)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case CLEAR_BOARD: {\r\n            const { grid, statistics } = clearBoard(state.grid, state.startNode, state.endNode)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case CLEAR_PATH: {\r\n            const { grid, statistics } = clearPath(state.grid, state.statistics)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case SET_DRAGGED_NODE:\r\n            return {\r\n                ...state,\r\n                draggedNode: {\r\n                    ...state.grid[action.payload.row][action.payload.col],\r\n                    row: action.payload.row,\r\n                    col: action.payload.col,\r\n                }\r\n            }\r\n        case CLEAR_DRAGGED_NODE:\r\n            return {\r\n                ...state,\r\n                draggedNode: null\r\n            }\r\n        case SET_START_MASKED_NODE: {\r\n            const { statistics } = calculateMaskedStatistic(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                statistics,\r\n                startMaskedNode: {\r\n                    ...state.grid[action.payload.row][action.payload.col]\r\n                }\r\n            }\r\n        }\r\n        case APPLY_START_MASKED_NODE: {\r\n            const { grid, statistics } = applyMaskedNode(state.grid, state.statistics, action.payload, state.startMaskedNode)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics \r\n            }\r\n        }\r\n        case RESET_START_MASKED_NODE: \r\n            return {\r\n                ...state,\r\n                startMaskedNode: new Node()\r\n            }\r\n        case SET_END_MASKED_NODE: {\r\n            const { statistics } = calculateMaskedStatistic(state.grid, state.statistics, action.payload)\r\n            return {\r\n                ...state,\r\n                statistics,\r\n                endMaskedNode: {\r\n                    ...state.grid[action.payload.row][action.payload.col]\r\n                }\r\n            }\r\n        }\r\n        case APPLY_END_MASKED_NODE: {\r\n            const { grid, statistics } = applyMaskedNode(state.grid, state.statistics, action.payload, state.endMaskedNode)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics \r\n            }\r\n        }\r\n        case RESET_END_MASKED_NODE: \r\n            return {\r\n                ...state,\r\n                endMaskedNode: new Node()\r\n            }\r\n        case RERUN_ALGORITHM: {\r\n            const { grid, statistics } = generateRerunAlgorithmGrid(state.grid, state.startNode, \r\n                state.endNode, action.payload.algorithmSelected)\r\n            return {\r\n                ...state,\r\n                grid,\r\n                statistics\r\n            }\r\n        }\r\n        case SET_ESTIMATE_VALUES: \r\n            return {\r\n                ...state,\r\n                grid: setEstimateValues(state.grid, action.payload)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n} \r\n\r\nfunction algorithmStatus(state = 'UNSELECTED', action) {\r\n    switch(action.type) {\r\n        case READY_ALGORITHM:\r\n            return 'READY';\r\n        case RUN_ALGORITHM:\r\n            return 'RUNNING';\r\n        case PAUSE_ALGORITHM:\r\n            return 'PAUSED';\r\n        case COMPLETE_ALGORITHM:\r\n            return 'COMPLETED';\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction algorithmSelected(state = null, action) {  // we set initial to BFS for now to test\r\n    switch(action.type) {\r\n        case SET_BFS_ALGORITHM:\r\n            return 'BFS';\r\n        case SET_ASTAR_ALGORITHM:\r\n            return 'ASTAR';\r\n        case SET_DFS_ALGORITHM:\r\n            return 'DFS';\r\n        case SET_GREEDY_ALGORITHM:\r\n            return 'GREEDY';\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction algorithmState(state = null, action) {  \r\n    switch(action.type) {\r\n        case SET_ALGORITHM_STATE:\r\n            return action.payload;\r\n        case CLEAR_ALGORITHM_STATE:\r\n            return null;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst reducer = combineReducers({\r\n    board,\r\n    algorithmStatus,\r\n    algorithmSelected,\r\n    algorithmState\r\n})\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux';\nimport reducer from './reducers'\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nexport default store\n"],"sourceRoot":""}